#!/usr/bin/env node

/**
 * Test pour v√©rifier que l'optimisation IA utilise bien original_amount
 * et n'it√®re pas en cascades de r√©ductions
 */

const SUPABASE_URL = "https://qlqgyrfqiflnqknbtycw.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFscWd5cmZxaWZsbnFrbmJ0eWN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjU5OTQyMTIsImV4cCI6MjA0MTU3MDIxMn0.kR3u-_8uu2oPq10TXzuhsOeLKHX-_HVdO3G_-aHJPGg";

// ID du devis de test (doit exister dans la base)
const TEST_QUOTE_ID = "e43db7e8-f831-4055-8a97-9734d67429ff";

async function testOriginalAmountFix() {
  console.log("üî¨ TEST: V√©rification que l'optimisation IA utilise original_amount");
  console.log("=" .repeat(70));

  try {
    // 1. R√©cup√©rer l'√©tat actuel du devis
    console.log("\nüìã 1. √âtat actuel du devis...");
    const devisResponse = await fetch(`${SUPABASE_URL}/rest/v1/devis?id=eq.${TEST_QUOTE_ID}&select=*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (!devisResponse.ok) {
      throw new Error(`Erreur r√©cup√©ration devis: ${devisResponse.status}`);
    }

    const devisData = await devisResponse.json();
    if (!devisData || devisData.length === 0) {
      throw new Error("Devis non trouv√©");
    }

    const devis = devisData[0];
    console.log(`   üí∞ Montant actuel: ${devis.amount} FCFA`);
    console.log(`   üíæ Montant original: ${devis.original_amount || 'Non d√©fini'} FCFA`);

    // 2. Premi√®re optimisation
    console.log("\nüß† 2. Premi√®re optimisation IA...");
    const firstOptimization = await fetch(`${SUPABASE_URL}/functions/v1/ai-quote-optimization`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      },
      body: JSON.stringify({
        quoteId: TEST_QUOTE_ID
      })
    });

    if (!firstOptimization.ok) {
      const errorText = await firstOptimization.text();
      throw new Error(`Erreur premi√®re optimisation: ${firstOptimization.status} - ${errorText}`);
    }

    const firstResult = await firstOptimization.json();
    console.log(`   üìä R√©sultat 1:`);
    console.log(`      Original: ${firstResult.optimization.originalAmount} FCFA`);
    console.log(`      Sugg√©r√©: ${firstResult.optimization.suggestedAmount} FCFA`);
    console.log(`      Variation: ${firstResult.optimization.optimizationPercentage}%`);

    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 3. Deuxi√®me optimisation (pour tester la cascade)
    console.log("\nüîÑ 3. Deuxi√®me optimisation IA (test anti-cascade)...");
    const secondOptimization = await fetch(`${SUPABASE_URL}/functions/v1/ai-quote-optimization`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      },
      body: JSON.stringify({
        quoteId: TEST_QUOTE_ID
      })
    });

    if (!secondOptimization.ok) {
      const errorText = await secondOptimization.text();
      throw new Error(`Erreur deuxi√®me optimisation: ${secondOptimization.status} - ${errorText}`);
    }

    const secondResult = await secondOptimization.json();
    console.log(`   üìä R√©sultat 2:`);
    console.log(`      Original: ${secondResult.optimization.originalAmount} FCFA`);
    console.log(`      Sugg√©r√©: ${secondResult.optimization.suggestedAmount} FCFA`);
    console.log(`      Variation: ${secondResult.optimization.optimizationPercentage}%`);

    // 4. Analyse des r√©sultats
    console.log("\nüìà 4. Analyse des r√©sultats...");
    
    const sameOriginal = firstResult.optimization.originalAmount === secondResult.optimization.originalAmount;
    const reasoningFirst = firstResult.optimization.reasoning || '';
    const reasoningSecond = secondResult.optimization.reasoning || '';
    
    console.log(`   üéØ Montant original coh√©rent: ${sameOriginal ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    if (sameOriginal) {
      console.log(`   ‚úÖ SUCCESS: Les deux optimisations utilisent le m√™me montant original`);
      console.log(`   üìù Montant de r√©f√©rence stable: ${firstResult.optimization.originalAmount} FCFA`);
    } else {
      console.log(`   ‚ùå PROBL√àME: Le montant original diff√®re entre les optimisations`);
      console.log(`   üìù Optim 1: ${firstResult.optimization.originalAmount} FCFA`);
      console.log(`   üìù Optim 2: ${secondResult.optimization.originalAmount} FCFA`);
    }

    // 5. V√©rifier les raisonnements
    console.log("\nüí≠ 5. Analyse des raisonnements...");
    console.log(`   ü§ñ Raisonnement 1: ${reasoningFirst.substring(0, 100)}...`);
    console.log(`   ü§ñ Raisonnement 2: ${reasoningSecond.substring(0, 100)}...`);

    // 6. V√©rifier l'√©tat final du devis dans la base
    console.log("\nüîç 6. √âtat final du devis dans la base...");
    const finalDevisResponse = await fetch(`${SUPABASE_URL}/rest/v1/devis?id=eq.${TEST_QUOTE_ID}&select=*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (finalDevisResponse.ok) {
      const finalDevisData = await finalDevisResponse.json();
      if (finalDevisData && finalDevisData.length > 0) {
        const finalDevis = finalDevisData[0];
        console.log(`   üí∞ Montant final: ${finalDevis.amount} FCFA`);
        console.log(`   üíæ Original final: ${finalDevis.original_amount || 'Non d√©fini'} FCFA`);
        
        if (finalDevis.original_amount) {
          console.log(`   ‚úÖ SUCCESS: La colonne original_amount est bien sauvegard√©e`);
        } else {
          console.log(`   ‚ö†Ô∏è  ATTENTION: La colonne original_amount n'est pas encore sauvegard√©e`);
        }
      }
    }

    console.log("\nüéâ TEST TERMIN√â");
    console.log("=" .repeat(70));

  } catch (error) {
    console.error('\n‚ùå ERREUR:', error.message);
    console.log("\nüîß Suggestions:");
    console.log("   1. V√©rifiez que le devis existe dans la base");
    console.log("   2. V√©rifiez que l'edge function est d√©ploy√©e");
    console.log("   3. V√©rifiez les logs Supabase pour plus de d√©tails");
    process.exit(1);
  }
}

// Ex√©cution
testOriginalAmountFix();
