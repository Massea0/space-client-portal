-- ============================================================================
-- SCRIPT D'AUDIT ET PR√âPARATION MODULE RH - MYSPACE
-- ============================================================================
-- Date: 4 juillet 2025
-- Objectif: Audit du sch√©ma existant et pr√©paration pour le module RH avanc√©
-- √Ä ex√©cuter depuis l'interface web Supabase (SQL Editor)
-- ============================================================================

-- PHASE 1: AUDIT DU SCHEMA EXISTANT
-- ============================================================================

-- 1.1 V√©rification de l'existence des tables principales
SELECT 
    'AUDIT TABLES EXISTANTES' as audit_type,
    table_name,
    CASE 
        WHEN table_name IN ('users', 'companies', 'devis', 'invoices', 'tickets') 
        THEN '‚úÖ Table m√©tier existante'
        WHEN table_name LIKE '%payment%' 
        THEN 'üí≥ Table paiement'
        WHEN table_name LIKE '%contract%' 
        THEN 'üìã Table contrat'
        WHEN table_name LIKE '%ai_%' OR table_name LIKE '%prediction%'
        THEN 'ü§ñ Table IA'
        ELSE 'üìã Autre table'
    END as category
FROM information_schema.tables 
WHERE table_schema = 'public' 
    AND table_type = 'BASE TABLE'
ORDER BY table_name;

-- 1.2 V√©rification des contraintes de cl√©s √©trang√®res
SELECT 
    'AUDIT FOREIGN KEYS' as audit_type,
    tc.table_name,
    tc.constraint_name,
    kcu.column_name,
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
    AND tc.table_schema = kcu.table_schema
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
    AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY' 
    AND tc.table_schema = 'public'
ORDER BY tc.table_name, tc.constraint_name;

-- 1.3 V√©rification des politiques RLS
SELECT 
    'AUDIT RLS POLICIES' as audit_type,
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- 1.4 Audit des colonnes de la table users (important pour RH)
SELECT 
    'AUDIT TABLE USERS' as audit_type,
    column_name,
    data_type,
    is_nullable,
    column_default,
    character_maximum_length
FROM information_schema.columns 
WHERE table_schema = 'public' 
    AND table_name = 'users'
ORDER BY ordinal_position;

-- ============================================================================
-- PHASE 2: PR√âPARATION DES DONN√âES RH
-- ============================================================================

-- 2.1 V√©rification des r√¥les utilisateurs existants
SELECT 
    'AUDIT USER ROLES' as audit_type,
    role,
    COUNT(*) as user_count,
    STRING_AGG(email, ', ') as sample_emails
FROM users 
WHERE is_active = true
GROUP BY role
ORDER BY user_count DESC;

-- 2.2 V√©rification de l'existence des tables RH
SELECT 
    'VERIFICATION TABLES RH' as audit_type,
    expected_tables.table_name,
    CASE 
        WHEN t.table_name IS NOT NULL 
        THEN '‚úÖ Table RH existante'
        ELSE '‚ùå Table RH manquante'
    END as status
FROM (
    VALUES 
        ('branches'),
        ('departments'), 
        ('positions'),
        ('employees')
) AS expected_tables(table_name)
LEFT JOIN information_schema.tables t 
    ON t.table_name = expected_tables.table_name 
    AND t.table_schema = 'public';

-- ============================================================================
-- PHASE 3: PR√âPARATION DES R√îLES ET PERMISSIONS
-- ============================================================================

-- 3.1 Ajout de nouveaux r√¥les RH si n√©cessaire
-- (Cette section sera ex√©cut√©e conditionnellement)

-- V√©rification des r√¥les RH dans la table users
SELECT 
    'PREPARATION ROLES RH' as audit_type,
    'R√¥les RH n√©cessaires:' as description,
    CASE 
        WHEN EXISTS(SELECT 1 FROM users WHERE role = 'hr_manager') 
        THEN '‚úÖ hr_manager existe'
        ELSE '‚ö†Ô∏è hr_manager √† cr√©er'
    END as hr_manager_status,
    CASE 
        WHEN EXISTS(SELECT 1 FROM users WHERE role = 'hr_admin') 
        THEN '‚úÖ hr_admin existe'
        ELSE '‚ö†Ô∏è hr_admin √† cr√©er'
    END as hr_admin_status,
    CASE 
        WHEN EXISTS(SELECT 1 FROM users WHERE role = 'employee') 
        THEN '‚úÖ employee existe'
        ELSE '‚ö†Ô∏è employee √† cr√©er'
    END as employee_status;

-- ============================================================================
-- PHASE 4: VALIDATION DE L'INT√âGRIT√â
-- ============================================================================

-- 4.1 V√©rification des contraintes d'int√©grit√©
SELECT 
    'VALIDATION INTEGRITE' as audit_type,
    'Companies sans users:' as check_type,
    COUNT(*) as count
FROM companies c
LEFT JOIN users u ON u.company_id = c.id
WHERE u.id IS NULL;

SELECT 
    'VALIDATION INTEGRITE' as audit_type,
    'Users sans company:' as check_type,
    COUNT(*) as count
FROM users u
LEFT JOIN companies c ON c.id = u.company_id
WHERE u.company_id IS NOT NULL AND c.id IS NULL;

-- 4.2 V√©rification des donn√©es manquantes critiques
SELECT 
    'VALIDATION DONNEES' as audit_type,
    'Users avec email null:' as check_type,
    COUNT(*) as count
FROM users 
WHERE email IS NULL OR email = '';

SELECT 
    'VALIDATION DONNEES' as audit_type,
    'Companies avec nom null:' as check_type,
    COUNT(*) as count
FROM companies 
WHERE name IS NULL OR name = '';

-- ============================================================================
-- PHASE 5: RECOMMANDATIONS POUR L'IMPL√âMENTATION RH
-- ============================================================================

-- 5.1 √âvaluation de la pr√©paration RH
SELECT 
    'RECOMMANDATIONS RH' as audit_type,
    '√âtat de pr√©paration:' as description,
    CASE 
        WHEN (
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
                AND table_name IN ('branches', 'departments', 'positions', 'employees')
        ) = 4 
        THEN '‚úÖ Tables RH d√©j√† cr√©√©es - Migration appliqu√©e'
        ELSE '‚ö†Ô∏è Tables RH manquantes - Migration n√©cessaire'
    END as hr_tables_status,
    
    CASE 
        WHEN (
            SELECT COUNT(*) 
            FROM users 
            WHERE role IN ('hr_manager', 'hr_admin', 'super_admin')
        ) > 0 
        THEN '‚úÖ Utilisateurs RH disponibles'
        ELSE '‚ö†Ô∏è Aucun utilisateur RH - Cr√©ation n√©cessaire'
    END as hr_users_status;

-- ============================================================================
-- PHASE 6: ACTIONS CONDITIONNELLES (√Ä D√âCOMMENTER SI N√âCESSAIRE)
-- ============================================================================

-- 6.1 Cr√©ation d'un utilisateur RH de test (√Ä D√âCOMMENTER SI BESOIN)
-- INSERT INTO users (
--     id,
--     first_name,
--     last_name,
--     email,
--     role,
--     company_id,
--     is_active
-- ) VALUES (
--     gen_random_uuid(),
--     'Admin',
--     'RH',
--     'admin.rh@myspace.com',
--     'hr_manager',
--     (SELECT id FROM companies LIMIT 1),
--     true
-- )
-- ON CONFLICT (email) DO NOTHING;

-- 6.2 Mise √† jour des r√¥les existants (√Ä D√âCOMMENTER SI BESOIN)
-- UPDATE users 
-- SET role = 'hr_manager' 
-- WHERE email = 'votre.email@example.com'
--     AND role = 'admin';

-- ============================================================================
-- PHASE 7: R√âSUM√â DE L'AUDIT
-- ============================================================================

SELECT 
    'RESUME AUDIT' as audit_type,
    'Nombre total de tables:' as metric,
    COUNT(*) as value
FROM information_schema.tables 
WHERE table_schema = 'public' AND table_type = 'BASE TABLE'

UNION ALL

SELECT 
    'RESUME AUDIT' as audit_type,
    'Nombre total d''utilisateurs actifs:' as metric,
    COUNT(*) as value
FROM users 
WHERE is_active = true

UNION ALL

SELECT 
    'RESUME AUDIT' as audit_type,
    'Nombre de companies:' as metric,
    COUNT(*) as value
FROM companies

UNION ALL

SELECT 
    'RESUME AUDIT' as audit_type,
    'Edge Functions disponibles:' as metric,
    37 as value  -- Bas√© sur l'audit pr√©c√©dent

ORDER BY metric;

-- ============================================================================
-- INSTRUCTIONS D'EX√âCUTION
-- ============================================================================

-- üî¥ IMPORTANT: AVANT D'EX√âCUTER CE SCRIPT
--
-- 1. Connectez-vous √† votre interface Supabase
-- 2. Allez dans SQL Editor
-- 3. Copiez-collez ce script
-- 4. Ex√©cutez section par section pour v√©rifier les r√©sultats
--
-- üìã ACTIONS APR√àS L'AUDIT:
--
-- ‚úÖ Si les tables RH existent d√©j√†:
--    - Le module RH peut √™tre activ√© imm√©diatement
--    - V√©rifiez les permissions RLS
--    - Testez les APIs RH existantes
--
-- ‚ö†Ô∏è Si les tables RH n'existent pas:
--    - Appliquez la migration 20250703200000_create_hr_foundation.sql
--    - Cr√©ez un utilisateur hr_manager
--    - Configurez les politiques RLS
--
-- üöÄ PROCHAINES √âTAPES:
--    1. Ex√©cuter ce script d'audit
--    2. Analyser les r√©sultats
--    3. Appliquer les corrections recommand√©es
--    4. Tester l'interface RH dans l'application
--
-- üìû SUPPORT: 
--    - Documentation: docs/hr-integration/
--    - Logs: V√©rifiez les Edge Functions logs
--    - Tests: Utilisez les APIs /api/hr/*

-- Fin du script d'audit RH MySpace
-- Version: 1.0
-- Date: 4 juillet 2025
