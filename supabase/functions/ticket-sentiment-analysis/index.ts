// supabase/functions/ticket-sentiment-analysis/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface SentimentAnalysisPayload {
  ticketId: string;
  messageContent: string;
  messageId: string;
}

interface GeminiResponse {
  priority: 'low' | 'medium' | 'high' | 'urgent';
  sentiment: 'positive' | 'neutral' | 'negative' | 'frustrated';
  summary: string;
}

serve(async (req) => {
  // Gestion CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Vérifier la méthode HTTP
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ error: 'Method not allowed' }),
        { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Parser le payload
    const payload: SentimentAnalysisPayload = await req.json()
    
    if (!payload.ticketId || !payload.messageContent || !payload.messageId) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields: ticketId, messageContent, messageId' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Processing sentiment analysis for ticket:', payload.ticketId)
    console.log('Message content preview:', payload.messageContent.substring(0, 100) + '...')

    // Récupérer la clé API Gemini
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      console.error('GEMINI_API_KEY not found in environment variables')
      return new Response(
        JSON.stringify({ error: 'Gemini API key not configured' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Construire le prompt pour Gemini
    const prompt = `Analyse le message suivant issu d'un ticket de support. Retourne UNIQUEMENT un objet JSON valide avec cette structure : {"priority": "valeur", "sentiment": "valeur", "summary": "résumé"}.

- "priority": Évalue le niveau d'urgence. Valeurs possibles : "low", "medium", "high", "urgent".
  * "low": Messages informatifs, remerciements, questions simples
  * "medium": Problèmes non critiques, demandes de fonctionnalités
  * "high": Problèmes impactant le business, bugs importants
  * "urgent": Systèmes down, pertes financières, colère extrême

- "sentiment": Analyse le sentiment. Valeurs possibles : "positive", "neutral", "negative", "frustrated".
  * "positive": Satisfaction, remerciements, retours positifs
  * "neutral": Questions neutres, demandes d'information
  * "negative": Mécontentement, critique constructive
  * "frustrated": Colère, urgence extrême, MAJUSCULES, points d'exclamation multiples

- "summary": Résume le problème en une phrase concise en français.

Message à analyser : "${payload.messageContent.replace(/"/g, '\\"')}"

Réponds UNIQUEMENT avec l'objet JSON, sans texte additionnel.`

    // Appel à l'API Gemini
    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      }
    )

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text()
      console.error('Gemini API error:', geminiResponse.status, errorText)
      return new Response(
        JSON.stringify({ error: 'Failed to analyze sentiment with Gemini API' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const geminiData = await geminiResponse.json()
    console.log('Gemini raw response:', JSON.stringify(geminiData, null, 2))

    // Extraire le texte de la réponse Gemini
    const generatedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text
    if (!generatedText) {
      console.error('No text generated by Gemini')
      return new Response(
        JSON.stringify({ error: 'No response generated by Gemini' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Generated text from Gemini:', generatedText)

    // Parser la réponse JSON de Gemini
    let analysisResult: GeminiResponse
    try {
      // Nettoyer le texte pour extraire seulement le JSON
      const jsonMatch = generatedText.match(/\{.*\}/s)
      if (!jsonMatch) {
        throw new Error('No JSON found in Gemini response')
      }
      
      analysisResult = JSON.parse(jsonMatch[0])
      
      // Valider les champs requis
      if (!analysisResult.priority || !analysisResult.sentiment || !analysisResult.summary) {
        throw new Error('Missing required fields in Gemini response')
      }

      // Valider les valeurs
      const validPriorities = ['low', 'medium', 'high', 'urgent']
      const validSentiments = ['positive', 'neutral', 'negative', 'frustrated']
      
      if (!validPriorities.includes(analysisResult.priority)) {
        console.warn('Invalid priority, defaulting to medium:', analysisResult.priority)
        analysisResult.priority = 'medium'
      }
      
      if (!validSentiments.includes(analysisResult.sentiment)) {
        console.warn('Invalid sentiment, defaulting to neutral:', analysisResult.sentiment)
        analysisResult.sentiment = 'neutral'
      }

    } catch (parseError) {
      console.error('Failed to parse Gemini JSON response:', parseError)
      console.error('Raw Gemini text:', generatedText)
      
      // Fallback : analyser manuellement le sentiment basique
      const content = payload.messageContent.toLowerCase()
      let fallbackPriority: 'low' | 'medium' | 'high' | 'urgent' = 'medium'
      let fallbackSentiment: 'positive' | 'neutral' | 'negative' | 'frustrated' = 'neutral'
      
      // Détection de mots-clés pour priorité
      if (content.includes('urgent') || content.includes('critique') || content.includes('!!!') || content.includes('catastrophe')) {
        fallbackPriority = 'urgent'
        fallbackSentiment = 'frustrated'
      } else if (content.includes('problème') || content.includes('bug') || content.includes('erreur')) {
        fallbackPriority = 'high'
        fallbackSentiment = 'negative'
      } else if (content.includes('merci') || content.includes('résolu') || content.includes('parfait')) {
        fallbackPriority = 'low'
        fallbackSentiment = 'positive'
      }
      
      analysisResult = {
        priority: fallbackPriority,
        sentiment: fallbackSentiment,
        summary: 'Analyse automatique de fallback'
      }
    }

    console.log('Analysis result:', analysisResult)

    // Initialiser le client Supabase avec la clé service_role
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    // Mettre à jour la priorité du ticket
    const { error: updateError } = await supabase
      .from('tickets')
      .update({ 
        priority: analysisResult.priority,
        updated_at: new Date().toISOString()
      })
      .eq('id', payload.ticketId)

    if (updateError) {
      console.error('Failed to update ticket priority:', updateError)
      return new Response(
        JSON.stringify({ error: 'Failed to update ticket priority', details: updateError }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log(`Successfully updated ticket ${payload.ticketId} priority to ${analysisResult.priority}`)

    // Créer une alerte IA si la priorité est élevée
    if (analysisResult.priority === 'high' || analysisResult.priority === 'urgent') {
      const { error: alertError } = await supabase
        .from('ai_alerts')
        .insert({
          entity_type: 'ticket',
          entity_id: payload.ticketId,
          alert_type: 'sentiment_priority',
          title: `Ticket priorité ${analysisResult.priority.toUpperCase()}`,
          description: `Sentiment ${analysisResult.sentiment}: ${analysisResult.summary}`,
          severity: analysisResult.priority === 'urgent' ? 'high' : 'medium',
          created_for: 'admin', // Alerte pour les admins
          metadata: {
            sentiment: analysisResult.sentiment,
            original_message_id: payload.messageId,
            analysis_summary: analysisResult.summary
          }
        })

      if (alertError) {
        console.error('Failed to create AI alert:', alertError)
        // Ne pas faire échouer la requête pour une erreur d'alerte
      } else {
        console.log('Created AI alert for high/urgent priority ticket')
      }
    }

    // Retourner la réponse de succès
    return new Response(
      JSON.stringify({
        success: true,
        ticketId: payload.ticketId,
        messageId: payload.messageId,
        analysis: analysisResult,
        timestamp: new Date().toISOString()
      }),
      { 
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )

  } catch (error) {
    console.error('Unexpected error in sentiment analysis:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})
