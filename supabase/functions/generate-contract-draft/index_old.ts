// supabase/functions/generate-contract-draft/index.ts// Mission 1: Edge Function pour la génération de contrats IAimport { serve } from "https://deno.land/std@0.168.0/http/server.ts";import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';const corsHeaders = {  'Access-Control-Allow-Origin': '*',  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',};interface ContractGenerationRequest {  devisId: string;  clientId: string;  templateType: 'service' | 'maintenance' | 'consulting' | 'licensing';  customClauses?: string[];  specificRequirements?: string;}serve(async (req) => {  // Handle CORS preflight requests  if (req.method === 'OPTIONS') {    return new Response('ok', { headers: corsHeaders });  }  try {    // Initialize Supabase client    const supabaseClient = createClient(      Deno.env.get('SUPABASE_URL') ?? '',      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',    );    const { devisId, clientId, templateType, customClauses, specificRequirements } = await req.json() as ContractGenerationRequest;    console.log('Génération de contrat IA:', { devisId, clientId, templateType });    // 1. Récupérer le devis source    const { data: devis, error: devisError } = await supabaseClient      .from('devis')      .select(`        *,        companies:company_id (          id, name, email, address        )      `)      .eq('id', devisId)      .single();    if (devisError || !devis) {      throw new Error(`Devis introuvable: ${devisError?.message || 'ID invalide'}`);    }    // 2. Récupérer le template approprié    const { data: template, error: templateError } = await supabaseClient      .from('contract_templates')      .select('*')      .eq('contract_type', templateType)      .eq('is_active', true)      .eq('is_default', true)      .single();    if (templateError || !template) {      console.warn('Template par défaut introuvable, utilisation d\'un template générique');    }    // 3. Générer le numéro de contrat unique    const year = new Date().getFullYear();    const { count } = await supabaseClient      .from('contracts')      .select('*', { count: 'exact', head: true })      .like('contract_number', `CTR-${year}-%`);    const contractNumber = `CTR-${year}-${String((count || 0) + 1).padStart(3, '0')}`;    // 4. Générer le contenu du contrat avec IA (simulation pour l'instant)    const aiGeneratedContent = await generateContractContent({      devis,      client: devis.companies,      templateType,      template: template?.template_content,      customClauses: customClauses || [],      specificRequirements: specificRequirements || ''    });    // 5. Calculer les scores IA    const complianceScore = calculateComplianceScore(aiGeneratedContent, templateType);    const aiConfidenceScore = calculateAIConfidenceScore(aiGeneratedContent, template);    // 6. Créer le contrat dans la base    const newContract = {      client_id: clientId,      devis_id: devisId,      contract_number: contractNumber,      title: `Contrat ${templateType} - ${devis.companies?.name || 'Client'}`,      object: devis.object || 'Prestation de services',      status: 'draft',      start_date: new Date().toISOString(),      end_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // +1 an      amount: devis.amount || 0,      currency: 'EUR',      payment_terms: '30 jours',      content_preview: aiGeneratedContent.preview,      clauses_summary: aiGeneratedContent.clausesSummary,      compliance_score: complianceScore,      ai_confidence_score: aiConfidenceScore,      generated_by_ai: true,      template_used: template?.name || `Template ${templateType} IA`,      contract_type: templateType,      risk_analysis: aiGeneratedContent.riskAnalysis,      obligations_monitoring: {        client_obligations: [],        provider_obligations: [],        next_milestones: []      },      auto_renewal: false    };    const { data: contract, error: contractError } = await supabaseClient      .from('contracts')      .insert(newContract)      .select()      .single();    if (contractError) {      throw new Error(`Erreur création contrat: ${contractError.message}`);    }    console.log('Contrat généré avec succès:', contract.id);    return new Response(      JSON.stringify({        success: true,        contract: {          contractId: contract.id,          contractNumber: contract.contract_number,          ...contract        }      }),      {        headers: { ...corsHeaders, 'Content-Type': 'application/json' },        status: 200,      }    );  } catch (error) {    console.error('Erreur génération contrat:', error);    return new Response(      JSON.stringify({        success: false,        error: error.message      }),      {        headers: { ...corsHeaders, 'Content-Type': 'application/json' },        status: 500,      }    );  }});// --- Fonctions auxiliaires ---async function generateContractContent(params: {  devis: any;  client: any;  templateType: string;  template?: string;  customClauses: string[];  specificRequirements: string;}) {  const { devis, client, templateType, customClauses, specificRequirements } = params;  // Simulation de génération IA (à remplacer par un vrai appel OpenAI/Claude)  const preview = `CONTRAT DE ${templateType.toUpperCase()}Entre :- ${client?.name || 'Client'}, ci-après dénommé "le Client"- DExchange, ci-après dénommé "le Prestataire"OBJET : ${devis.object}MONTANT : ${devis.amount} EURDURÉE : Du ${new Date().toLocaleDateString()} au ${new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toLocaleDateString()}CLAUSES PRINCIPALES :${customClauses.length > 0 ? customClauses.map(c => `- ${c}`).join('\n') : '- Prestations conformes au devis'}${specificRequirements ? `\nEXIGENCES SPÉCIFIQUES :\n${specificRequirements}` : ''}[Contrat généré automatiquement par IA - Version préliminaire]`;  const clausesSummary = {    total_clauses: 8 + customClauses.length,    key_terms: [devis.object, templateType, ...customClauses.slice(0, 3)],    payment_schedule: 'Selon modalités du devis',    liability_cap: `${Math.floor(devis.amount * 1.5)} EUR`,    termination_notice: templateType === 'service' ? '30 jours' : '60 jours'  };  const riskAnalysis = {    overall_score: Math.floor(75 + Math.random() * 20), // 75-95    risks: {      financial: Math.floor(10 + Math.random() * 20),      legal: Math.floor(5 + Math.random() * 15),      operational: Math.floor(5 + Math.random() * 15),      compliance: Math.floor(0 + Math.random() * 10)    },    recommendations: [      'Réviser les clauses de paiement',      'Clarifier les conditions de résiliation',      'Ajouter une clause de force majeure'    ],    flagged_clauses: []  };  return {    preview,    clausesSummary,    riskAnalysis  };}function calculateComplianceScore(content: any, templateType: string): number {  // Simulation de calcul de score de conformité  let score = 80; // Score de base    if (content.clausesSummary.total_clauses >= 8) score += 5;  if (content.riskAnalysis.overall_score > 80) score += 5;  if (templateType === 'service') score += 5; // Les contrats de service sont plus standardisés    return Math.min(100, score);}function calculateAIConfidenceScore(content: any, template: any): number {  // Simulation de calcul de confiance IA  let score = 75; // Score de base    if (template) score += 10; // Template disponible  if (content.clausesSummary.total_clauses >= 10) score += 5;  if (content.riskAnalysis.risks.legal < 10) score += 5;    return Math.min(100, score);}