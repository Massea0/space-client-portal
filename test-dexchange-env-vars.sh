#!/bin/bash

# Script de test pour les nouvelles variables d'environnement DExchange dans le webhook
# Ce script teste la disponibilit√© des variables et simule un webhook pour v√©rifier le fonctionnement

echo "üß™ Test des variables d'environnement DExchange et du webhook..."

# Charger les variables si un fichier .env existe
if [ -f ".env" ]; then
  echo "üìÑ Chargement des variables depuis le fichier .env..."
  source .env
fi

# URL de base de la fonction
if [ -z "$SUPABASE_URL" ]; then
  # Essayer de r√©cup√©rer l'URL en demandant √† supabase CLI
  SUPABASE_URL=$(supabase functions list | grep -o 'https://.*\.functions\.supabase\.co' | head -1)
  
  if [ -z "$SUPABASE_URL" ]; then
    read -p "Entrez l'URL de base Supabase (ex: abcdef.supabase.co): " SUPABASE_URL
    if [ -z "$SUPABASE_URL" ]; then
      echo "‚ùå URL Supabase requise pour le test"
      exit 1
    fi
  fi
fi

# Construire l'URL compl√®te du webhook
WEBHOOK_URL="https://${SUPABASE_URL}/functions/v1/dexchange-callback-handler"

echo "üîç V√©rification des variables d'environnement..."
echo " - URL de la fonction: $WEBHOOK_URL"

# V√©rifier DEXCHANGE_API_KEY
if [ -z "$DEXCHANGE_API_KEY" ]; then
  echo " - ‚ùå DEXCHANGE_API_KEY: Non d√©finie"
else 
  echo " - ‚úÖ DEXCHANGE_API_KEY: D√©finie (${#DEXCHANGE_API_KEY} caract√®res)"
fi

# V√©rifier RELAY_SECRET
if [ -z "$RELAY_SECRET" ]; then
  echo " - ‚ùå RELAY_SECRET: Non d√©finie"
else
  echo " - ‚úÖ RELAY_SECRET: D√©finie (${#RELAY_SECRET} caract√®res)"
fi

# V√©rifier DEXCHANGE_WEBHOOK_SECRET ou WEBHOOK_SECRET
WEBHOOK_SECRET=${DEXCHANGE_WEBHOOK_SECRET:-$WEBHOOK_SECRET}
if [ -z "$WEBHOOK_SECRET" ]; then
  echo " - ‚ùå WEBHOOK_SECRET: Non d√©finie (la validation sera d√©sactiv√©e)"
else
  echo " - ‚úÖ WEBHOOK_SECRET: D√©finie (${#WEBHOOK_SECRET} caract√®res)"
fi

echo ""
echo "üîÑ Test de connexion de base au webhook..."
# Tester la connexion de base au webhook (ping)
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBHOOK_URL")
if [ "$RESPONSE" == "200" ]; then
  echo "‚úÖ Webhook accessible (HTTP 200)"
else
  echo "‚ö†Ô∏è Webhook renvoie HTTP $RESPONSE"
fi

echo ""
echo "üß™ Test de validation du secret webhook..."
# Tester avec secret valide
if [ ! -z "$WEBHOOK_SECRET" ]; then
  echo "üîë Test avec secret valide..."
  RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "x-webhook-secret: $WEBHOOK_SECRET" \
    -d '{"event":"test_event", "type":"ping"}' \
    "$WEBHOOK_URL")
  
  echo "R√©ponse: $RESPONSE"
  
  echo ""
  echo "üîí Test avec secret invalide..."
  RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "x-webhook-secret: invalid_secret" \
    -d '{"event":"test_event", "type":"ping"}' \
    "$WEBHOOK_URL")
  
  echo "R√©ponse: $RESPONSE"
else
  echo "‚ö†Ô∏è Impossible de tester la validation du secret car aucun secret n'est d√©fini"
fi

echo ""
echo "üìä Test de simulation de paiement complet..."
# G√©n√©rer un ID de facture de test
TEST_INVOICE_ID="test-$(date +%s)"

# Cr√©er un payload de test simulant un paiement r√©ussi
read -r -d '' TEST_PAYLOAD << EOM
{
  "event": "payment.succeeded",
  "type": "payment.succeeded",
  "data": {
    "id": "txn_$(date +%s)",
    "status": "succeeded",
    "amount": 5000,
    "currency": "XOF",
    "metadata": {
      "invoice_id": "$TEST_INVOICE_ID"
    },
    "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  }
}
EOM

# Envoyer le payload de test avec le secret
echo "üöÄ Envoi du payload de test avec l'ID de facture $TEST_INVOICE_ID"
if [ ! -z "$WEBHOOK_SECRET" ]; then
  RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "x-webhook-secret: $WEBHOOK_SECRET" \
    -d "$TEST_PAYLOAD" \
    "$WEBHOOK_URL")
else
  RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "$TEST_PAYLOAD" \
    "$WEBHOOK_URL")
fi

echo "R√©ponse: $RESPONSE"
echo ""
echo "‚úÖ Tests termin√©s"
