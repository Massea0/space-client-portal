# test-sentiment-trigger.ps1 - Tester le trigger d'analyse de sentiment

Write-Host "üß™ Test du trigger d'analyse de sentiment" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

$SUPABASE_URL = "https://qlqgyrfqiflnqknbtycw.supabase.co"
$SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFscWd5cmZxaWZsbnFrbmJ0eWN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxMDI0NTEsImV4cCI6MjA2NTY3ODQ1MX0.ODLjlo-8mvt_Y75LETySScpOQui-MaCBrszWRA2oyrE"

Write-Host "üìù V√©rification de la structure de la base de donn√©es..." -ForegroundColor Yellow

# V√©rifier si psql est disponible
$psqlPath = Get-Command psql -ErrorAction SilentlyContinue

if ($psqlPath) {
    Write-Host "‚úÖ PostgreSQL client trouv√©" -ForegroundColor Green
    
    Write-Host "`nüîç V√©rification des triggers..." -ForegroundColor Yellow
    
    # V√©rifier que les tables et triggers existent
    $triggerQuery = @"
SELECT 
    t.trigger_name,
    t.event_manipulation,
    t.event_object_table
FROM information_schema.triggers t 
WHERE t.trigger_name = 'on_new_ticket_message';
"@

    try {
        psql "postgresql://postgres:postgres@127.0.0.1:54322/postgres" -c $triggerQuery
    } catch {
        Write-Host "‚ùå Erreur lors de la v√©rification des triggers: $_" -ForegroundColor Red
    }

    Write-Host "`nüîç V√©rification de la fonction trigger..." -ForegroundColor Yellow

    $functionQuery = @"
SELECT 
    p.proname as function_name,
    p.prosrc as function_source
FROM pg_proc p 
WHERE p.proname = 'trigger_sentiment_analysis_on_new_message';
"@

    try {
        psql "postgresql://postgres:postgres@127.0.0.1:54322/postgres" -c $functionQuery
    } catch {
        Write-Host "‚ùå Erreur lors de la v√©rification de la fonction: $_" -ForegroundColor Red
    }

} else {
    Write-Host "‚ö†Ô∏è  PostgreSQL client (psql) non trouv√©" -ForegroundColor Yellow
    Write-Host "üí° Alternative: Test via API REST Supabase" -ForegroundColor Cyan
    
    # Test via API REST si psql n'est pas disponible
    $headers = @{
        'apikey' = $SUPABASE_ANON_KEY
        'Authorization' = "Bearer $SUPABASE_ANON_KEY"
        'Content-Type' = 'application/json'
    }
    
    try {
        Write-Host "`nüåê Test de connexion √† Supabase..." -ForegroundColor Yellow
        $response = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/" -Headers $headers -Method Get
        Write-Host "‚úÖ Connexion Supabase r√©ussie" -ForegroundColor Green
        
        # Tester l'acc√®s aux tables des tickets
        Write-Host "`nüìã V√©rification de l'acc√®s aux tables..." -ForegroundColor Yellow
        
        try {
            $ticketsResponse = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/tickets?select=id&limit=1" -Headers $headers -Method Get
            Write-Host "‚úÖ Table 'tickets' accessible" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur d'acc√®s √† la table 'tickets': $_" -ForegroundColor Red
        }
        
        try {
            $messagesResponse = Invoke-RestMethod -Uri "$SUPABASE_URL/rest/v1/ticket_messages?select=id&limit=1" -Headers $headers -Method Get
            Write-Host "‚úÖ Table 'ticket_messages' accessible" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur d'acc√®s √† la table 'ticket_messages': $_" -ForegroundColor Red
        }
        
    } catch {
        Write-Host "‚ùå Erreur de connexion √† Supabase: $_" -ForegroundColor Red
    }
}

Write-Host "`n‚úÖ Tests termin√©s - Structure v√©rifi√©e" -ForegroundColor Green
