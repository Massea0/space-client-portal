// Test de l'optimisation IA avec des devis r√©els
// Ce script teste que l'IA g√©n√®re des optimisations diff√©rentes pour chaque devis

import { aiService } from './src/services/aiService.js';

async function testMultipleQuoteOptimizations() {
  console.log('üß™ Test de variabilit√© des optimisations IA');
  console.log('===============================================\n');
  
  // IDs de devis de test (remplacer par de vrais IDs)
  const testQuoteIds = [
    '550e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440002', 
    '550e8400-e29b-41d4-a716-446655440003',
    '550e8400-e29b-41d4-a716-446655440004',
    '550e8400-e29b-41d4-a716-446655440005'
  ];
  
  const optimizations = [];
  
  try {
    console.log('üìä G√©n√©ration des optimisations pour chaque devis...\n');
    
    for (let i = 0; i < testQuoteIds.length; i++) {
      const quoteId = testQuoteIds[i];
      console.log(`üîç Test devis ${i + 1}: ${quoteId}`);
      
      try {
        const optimization = await aiService.optimizeQuote(quoteId);
        optimizations.push({
          quoteId,
          optimization
        });
        
        console.log(`   ‚úÖ Original: ${optimization.originalAmount.toLocaleString()} FCFA`);
        console.log(`   üí° Sugg√©r√©: ${optimization.suggestedAmount.toLocaleString()} FCFA`);
        console.log(`   üìà Optimisation: ${optimization.optimizationPercentage}%`);
        console.log(`   üéØ Conversion: ${Math.round(optimization.conversionProbability * 100)}%`);
        console.log(`   üí™ Confiance: ${Math.round(optimization.confidence * 100)}%`);
        console.log(`   üìù Raison: ${optimization.reasoning.substring(0, 80)}...`);
        console.log('');
        
        // Pause entre les appels
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.log(`   ‚ùå Erreur: ${error.message}\n`);
      }
    }
    
    // Analyse de la variabilit√©
    console.log('\nüìà Analyse de la variabilit√© des r√©sultats:');
    console.log('===============================================');
    
    if (optimizations.length > 1) {
      const amounts = optimizations.map(o => o.optimization.suggestedAmount);
      const percentages = optimizations.map(o => o.optimization.optimizationPercentage);
      const conversions = optimizations.map(o => o.optimization.conversionProbability);
      
      const uniqueAmounts = new Set(amounts).size;
      const uniquePercentages = new Set(percentages).size;
      const uniqueConversions = new Set(conversions).size;
      
      console.log(`üí∞ Montants uniques: ${uniqueAmounts}/${amounts.length}`);
      console.log(`üìä Pourcentages uniques: ${uniquePercentages}/${percentages.length}`);
      console.log(`üéØ Probabilit√©s uniques: ${uniqueConversions}/${conversions.length}`);
      
      if (uniqueAmounts === amounts.length) {
        console.log('‚úÖ Excellente variabilit√© des montants optimis√©s');
      } else if (uniqueAmounts > 1) {
        console.log('‚ö†Ô∏è  Variabilit√© partielle des montants');
      } else {
        console.log('‚ùå Aucune variabilit√© - probl√®me d√©tect√©');
      }
      
      // Statistiques d√©taill√©es
      const minAmount = Math.min(...amounts);
      const maxAmount = Math.max(...amounts);
      const avgAmount = amounts.reduce((a, b) => a + b, 0) / amounts.length;
      
      console.log(`\nüìä Statistiques des montants optimis√©s:`);
      console.log(`   Min: ${minAmount.toLocaleString()} FCFA`);
      console.log(`   Max: ${maxAmount.toLocaleString()} FCFA`);
      console.log(`   Moyenne: ${Math.round(avgAmount).toLocaleString()} FCFA`);
      console.log(`   √âcart: ${((maxAmount - minAmount) / avgAmount * 100).toFixed(1)}%`);
      
      // Affichage des recommandations distinctes
      console.log(`\nüí° Exemples de recommandations personnalis√©es:`);
      optimizations.slice(0, 3).forEach((opt, i) => {
        console.log(`\nDevis ${i + 1}:`);
        console.log(`   Prix: ${opt.optimization.recommendations.pricing[0]}`);
        console.log(`   Description: ${opt.optimization.recommendations.description[0]}`);
        console.log(`   Conditions: ${opt.optimization.recommendations.terms[0]}`);
      });
    }
    
    console.log('\nüéâ Test termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du test:', error);
  }
}

// Instructions d'utilisation
console.log(`
üöÄ Test de Variabilit√© de l'IA d'Optimisation des Devis

Ce script teste que l'IA g√©n√®re des optimisations personnalis√©es et vari√©es
pour chaque devis, √©vitant le probl√®me des "donn√©es mock" identiques.

üìã V√©rifications effectu√©es:
1. G√©n√©ration d'optimisations pour 5 devis diff√©rents
2. Analyse de la variabilit√© des montants sugg√©r√©s
3. V√©rification de la personnalisation des recommandations
4. Contr√¥le de la coh√©rence des probabilit√©s de conversion

üîß Pour ex√©cuter le test:
1. Assurez-vous que la base de donn√©es contient des devis
2. Remplacez les IDs de test par de vrais IDs de devis
3. Ex√©cutez: node test-ai-variability.js

üí° R√©sultats attendus:
- Chaque devis doit avoir des montants optimis√©s diff√©rents
- Les recommandations doivent √™tre personnalis√©es
- Les pourcentages d'optimisation doivent varier selon les donn√©es
- Les raisons d'optimisation doivent mentionner des donn√©es sp√©cifiques

‚ö†Ô∏è  Si les r√©sultats sont identiques, cela indique un probl√®me
   dans l'algorithme d'optimisation ou l'utilisation de donn√©es mock.
`);

// Lancer le test automatiquement si le script est ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testMultipleQuoteOptimizations();
}

export { testMultipleQuoteOptimizations };
