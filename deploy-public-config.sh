#!/bin/bash

# Script de d√©ploiement de la fonction get-public-config avec variables d'environnement
# Ce script d√©ploie la fonction de configuration publique avec les variables n√©cessaires

echo "üöÄ D√©ploiement de la fonction get-public-config avec variables d'environnement..."

# Charger les variables si un fichier .env existe
if [ -f ".env" ]; then
  echo "üìÑ Chargement des variables depuis le fichier .env..."
  source .env
fi

# D√©finir les variables si elles ne sont pas d√©j√† d√©finies
DEXCHANGE_ENVIRONMENT=${DEXCHANGE_ENVIRONMENT:-"sandbox"}
DEXCHANGE_API_URL_PRODUCTION=${DEXCHANGE_API_URL_PRODUCTION:-"https://api-m.dexchange.sn/api/v1"}
DEXCHANGE_API_URL_SANDBOX=${DEXCHANGE_API_URL_SANDBOX:-"https://api-sandbox.dexchange.sn/api/v1"}
SITE_URL=${SITE_URL:-""}
GCP_RELAY_URL=${GCP_RELAY_URL:-""}

# V√©rifier les variables critiques
if [ -z "$SITE_URL" ]; then
  echo "‚ö†Ô∏è  AVERTISSEMENT: SITE_URL non d√©fini!"
  echo "Les URLs de callback seront incompl√®tes"
  read -p "Continuer quand m√™me? (o/n): " confirmation
  if [[ $confirmation != "o" && $confirmation != "O" ]]; then
    echo "‚ùå D√©ploiement annul√©."
    exit 1
  fi
else
  echo "‚úÖ URL du site configur√©e: $SITE_URL"
fi

# D√©ployer la fonction avec les variables d'environnement
echo "üîÑ D√©ploiement de la fonction avec les variables d'environnement..."

# Construire la commande avec toutes les variables d√©finies
DEPLOY_CMD="supabase functions deploy get-public-config"

# Cette fonction n'a pas besoin de v√©rifier le JWT car elle est publique
DEPLOY_CMD="$DEPLOY_CMD --no-verify-jwt"

# Ajouter les variables d'environnement publiques
DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"DEXCHANGE_ENVIRONMENT=$DEXCHANGE_ENVIRONMENT\")"
DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"DEXCHANGE_API_URL_PRODUCTION=$DEXCHANGE_API_URL_PRODUCTION\")"
DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"DEXCHANGE_API_URL_SANDBOX=$DEXCHANGE_API_URL_SANDBOX\")"
DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"SITE_URL=$SITE_URL\")"

# Ajouter les URLs de callback si d√©finies
if [ ! -z "$DEXCHANGE_CALLBACK_URL" ]; then
  DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"DEXCHANGE_CALLBACK_URL=$DEXCHANGE_CALLBACK_URL\")"
  echo "‚úì Variable DEXCHANGE_CALLBACK_URL incluse"
fi

if [ ! -z "$DEXCHANGE_SUCCESS_URL" ]; then
  DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"DEXCHANGE_SUCCESS_URL=$DEXCHANGE_SUCCESS_URL\")"
  echo "‚úì Variable DEXCHANGE_SUCCESS_URL incluse"
fi

if [ ! -z "$DEXCHANGE_FAILURE_URL" ]; then
  DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"DEXCHANGE_FAILURE_URL=$DEXCHANGE_FAILURE_URL\")"
  echo "‚úì Variable DEXCHANGE_FAILURE_URL incluse"
fi

if [ ! -z "$GCP_RELAY_URL" ]; then
  DEPLOY_CMD="$DEPLOY_CMD --env-file <(echo \"GCP_RELAY_URL=$GCP_RELAY_URL\")"
  echo "‚úì Variable GCP_RELAY_URL incluse"
fi

# Ex√©cuter la commande
echo "‚ö° Ex√©cution: $DEPLOY_CMD"
eval "$DEPLOY_CMD"

# V√©rifier le r√©sultat
if [ $? -eq 0 ]; then
  echo ""
  echo "‚úÖ D√©ploiement r√©ussi!"
  echo ""
  echo "üìã Configuration d√©ploy√©e:"
  echo "  - Environnement DExchange: $DEXCHANGE_ENVIRONMENT"
  echo "  - URL API (${DEXCHANGE_ENVIRONMENT}): ${DEXCHANGE_ENVIRONMENT == 'production' ? DEXCHANGE_API_URL_PRODUCTION : DEXCHANGE_API_URL_SANDBOX}"
  echo "  - URL du site: $SITE_URL"
  echo ""
  echo "üîó URL de la fonction: https://${SUPABASE_URL}/functions/v1/get-public-config"
  echo ""
  echo "üß™ Testez avec: curl https://${SUPABASE_URL}/functions/v1/get-public-config"
else
  echo "‚ùå √âchec du d√©ploiement. V√©rifiez les erreurs ci-dessus."
fi
