#!/bin/bash

# Script de test complet pour toutes les fonctions DExchange
# Ce script teste les fonctions d√©ploy√©es et v√©rifie leur fonctionnement

echo "üß™ Test complet des fonctions DExchange..."

# Charger les variables si un fichier .env existe
if [ -f ".env" ]; then
  echo "üìÑ Chargement des variables depuis le fichier .env..."
  source .env
fi

# URL de base de Supabase
if [ -z "$SUPABASE_URL" ]; then
  # Essayer de r√©cup√©rer l'URL via supabase CLI
  SUPABASE_URL=$(supabase functions list | grep -o 'https://.*\.functions\.supabase\.co' | head -1)
  
  if [ -z "$SUPABASE_URL" ]; then
    read -p "Entrez l'URL de base Supabase (ex: abcdef.supabase.co): " SUPABASE_URL
    if [ -z "$SUPABASE_URL" ]; then
      echo "‚ùå URL Supabase requise pour le test"
      exit 1
    fi
  fi
fi

# URLs des fonctions
GET_CONFIG_URL="https://${SUPABASE_URL}/functions/v1/get-public-config"
WEBHOOK_URL="https://${SUPABASE_URL}/functions/v1/dexchange-callback-handler"

echo "üîç URLs test√©es:"
echo "  - Configuration publique: $GET_CONFIG_URL"
echo "  - Webhook DExchange: $WEBHOOK_URL"
echo ""

# Test 1: Fonction get-public-config
echo "üìã Test 1: Fonction get-public-config..."
CONFIG_RESPONSE=$(curl -s "$GET_CONFIG_URL")
CONFIG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$GET_CONFIG_URL")

if [ "$CONFIG_STATUS" == "200" ]; then
  echo "‚úÖ get-public-config accessible (HTTP 200)"
  
  # V√©rifier le contenu JSON
  if echo "$CONFIG_RESPONSE" | jq . > /dev/null 2>&1; then
    echo "‚úÖ R√©ponse JSON valide"
    
    # Extraire et afficher la configuration
    echo "üìÑ Configuration r√©cup√©r√©e:"
    echo "$CONFIG_RESPONSE" | jq '.config.dexchange' 2>/dev/null
    echo "$CONFIG_RESPONSE" | jq '.config.relay' 2>/dev/null
    echo "$CONFIG_RESPONSE" | jq '.config.site' 2>/dev/null
  else
    echo "‚ö†Ô∏è R√©ponse non JSON: $CONFIG_RESPONSE"
  fi
else
  echo "‚ùå get-public-config inaccessible (HTTP $CONFIG_STATUS)"
  echo "R√©ponse: $CONFIG_RESPONSE"
fi

echo ""

# Test 2: Webhook dexchange-callback-handler (ping)
echo "üîî Test 2: Webhook dexchange-callback-handler (ping)..."
WEBHOOK_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$WEBHOOK_URL")

if [ "$WEBHOOK_STATUS" == "200" ]; then
  echo "‚úÖ Webhook accessible (HTTP 200)"
  
  # Test ping avec body vide
  PING_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    "$WEBHOOK_URL")
  echo "üìÑ R√©ponse ping: $PING_RESPONSE"
else
  echo "‚ùå Webhook inaccessible (HTTP $WEBHOOK_STATUS)"
fi

echo ""

# Test 3: Validation du secret webhook
echo "üîê Test 3: Validation du secret webhook..."
WEBHOOK_SECRET=${DEXCHANGE_WEBHOOK_SECRET:-$WEBHOOK_SECRET}

if [ ! -z "$WEBHOOK_SECRET" ]; then
  echo "üîë Test avec secret valide..."
  VALID_SECRET_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "x-webhook-secret: $WEBHOOK_SECRET" \
    -d '{"event":"test_ping", "type":"ping"}' \
    "$WEBHOOK_URL")
  
  echo "R√©ponse (secret valide): $VALID_SECRET_RESPONSE"
  
  echo ""
  echo "üö´ Test avec secret invalide..."
  INVALID_SECRET_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "x-webhook-secret: invalid_secret_123" \
    -d '{"event":"test_ping", "type":"ping"}' \
    "$WEBHOOK_URL")
  
  echo "R√©ponse (secret invalide): $INVALID_SECRET_RESPONSE"
else
  echo "‚ö†Ô∏è Aucun secret configur√© - validation d√©sactiv√©e"
fi

echo ""

# Test 4: Simulation de paiement complet
echo "üí≥ Test 4: Simulation de paiement complet..."
TEST_INVOICE_ID="test-invoice-$(date +%s)"
TEST_TRANSACTION_ID="txn-$(date +%s)"

# Payload de test simulant un paiement r√©ussi
read -r -d '' PAYMENT_PAYLOAD << EOM
{
  "event": "payment.succeeded",
  "type": "payment.succeeded",
  "data": {
    "id": "$TEST_TRANSACTION_ID",
    "status": "succeeded",
    "amount": 5000,
    "currency": "XOF",
    "metadata": {
      "invoice_id": "$TEST_INVOICE_ID"
    },
    "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  }
}
EOM

echo "üöÄ Envoi du payload de paiement test..."
echo "  - ID Facture: $TEST_INVOICE_ID"
echo "  - ID Transaction: $TEST_TRANSACTION_ID"

if [ ! -z "$WEBHOOK_SECRET" ]; then
  PAYMENT_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "x-webhook-secret: $WEBHOOK_SECRET" \
    -d "$PAYMENT_PAYLOAD" \
    "$WEBHOOK_URL")
else
  PAYMENT_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "$PAYMENT_PAYLOAD" \
    "$WEBHOOK_URL")
fi

echo "üìÑ R√©ponse paiement: $PAYMENT_RESPONSE"

echo ""

# Test 5: CORS (Options)
echo "üåê Test 5: Support CORS..."
CORS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS "$WEBHOOK_URL")

if [ "$CORS_STATUS" == "200" ]; then
  echo "‚úÖ CORS support√© (HTTP 200 pour OPTIONS)"
else
  echo "‚ö†Ô∏è CORS potentiellement non support√© (HTTP $CORS_STATUS pour OPTIONS)"
fi

echo ""
echo "üéØ R√©sum√© des tests:"
echo "  - Configuration publique: $([ "$CONFIG_STATUS" == "200" ] && echo "‚úÖ OK" || echo "‚ùå √âCHEC")"
echo "  - Webhook accessible: $([ "$WEBHOOK_STATUS" == "200" ] && echo "‚úÖ OK" || echo "‚ùå √âCHEC")"
echo "  - Validation secret: $([ ! -z "$WEBHOOK_SECRET" ] && echo "‚úÖ CONFIGUR√â" || echo "‚ö†Ô∏è D√âSACTIV√â")"
echo "  - Support CORS: $([ "$CORS_STATUS" == "200" ] && echo "‚úÖ OK" || echo "‚ö†Ô∏è PARTIEL")"
echo ""
echo "‚úÖ Tests termin√©s"
