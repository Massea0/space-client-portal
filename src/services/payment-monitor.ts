// src/services/payment-monitor.ts

import { invoicesPaymentApi } from './invoices-payment';
import { paymentRealtimeService, PaymentStatusUpdate } from './payment-realtime';

export interface PaymentMonitorConfig {
  pollingInterval?: number;
  maxPollingDuration?: number;
  enableRealtime?: boolean;
  onStatusChange?: (status: PaymentStatusUpdate) => void;
  onError?: (error: Error) => void;
}

export class PaymentMonitor {
  private invoiceId: string;
  private transactionId: string;
  private config: Required<PaymentMonitorConfig>;
  private pollingInterval: NodeJS.Timeout | null = null;
  private realtimeUnsubscribe: (() => void) | null = null;
  private startTime: number = 0;
  private isRunning: boolean = false;
  private attemptCount: number = 0;
  private maxAttempts: number = 15; // Limite √† 15 tentatives (environ 1.5 minutes avec intervalle de 5s)

  constructor(invoiceId: string, transactionId: string, config: PaymentMonitorConfig = {}) {
    this.invoiceId = invoiceId;
    this.transactionId = transactionId;
    this.config = {
      pollingInterval: config.pollingInterval || 5000,
      maxPollingDuration: config.maxPollingDuration || 600000, // 10 minutes
      enableRealtime: config.enableRealtime ?? true,
      onStatusChange: config.onStatusChange || (() => {}),
      onError: config.onError || (() => {})
    };
  }

  /**
   * D√©marre la surveillance du paiement
   */
  public start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è [PaymentMonitor] Surveillance d√©j√† en cours');
      return;
    }

    console.log('üöÄ [PaymentMonitor] D√©marrage de la surveillance:', {
      invoiceId: this.invoiceId,
      transactionId: this.transactionId,
      config: this.config
    });

    this.isRunning = true;
    this.startTime = Date.now();

    // V√©rification initiale
    this.checkPaymentStatus();

    // D√©marrer le polling
    this.startPolling();

    // D√©marrer les notifications temps r√©el si activ√©es
    if (this.config.enableRealtime) {
      this.startRealtime();
    }
  }

  /**
   * Arr√™te la surveillance du paiement
   */
  public stop(): void {
    if (!this.isRunning) return;

    console.log('üõë [PaymentMonitor] Arr√™t de la surveillance');

    this.isRunning = false;

    // Arr√™ter le polling
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }

    // Arr√™ter les notifications temps r√©el
    if (this.realtimeUnsubscribe) {
      this.realtimeUnsubscribe();
      this.realtimeUnsubscribe = null;
    }
  }

  /**
   * V√©rifie le statut du paiement une fois
   */
  private async checkPaymentStatus(): Promise<void> {
    try {
      console.log('üîç [PaymentMonitor] V√©rification du statut...');
      
      this.attemptCount++;
      
      const status = await invoicesPaymentApi.checkPayment(this.invoiceId, this.transactionId);
      
      console.log(`üìä [PaymentMonitor] Statut re√ßu (tentative ${this.attemptCount}/${this.maxAttempts}):`, status);

      const update: PaymentStatusUpdate = {
        invoiceId: this.invoiceId,
        transactionId: this.transactionId,
        status: status.status as any,
        updatedAt: new Date().toISOString(),
        paymentMethod: status.paymentMethod,
        externalTransactionId: status.externalTransactionId
      };

      this.config.onStatusChange(update);

      // Arr√™ter la surveillance si le paiement est finalis√©
      if (status.status === 'paid' || status.status === 'failed') {
        console.log('‚úÖ [PaymentMonitor] Paiement finalis√©, arr√™t de la surveillance');
        this.stop();
        return;
      }

      // Arr√™ter si on a atteint le nombre maximum de tentatives
      if (this.attemptCount >= this.maxAttempts) {
        console.log('‚è∞ [PaymentMonitor] Nombre maximum de tentatives atteint, arr√™t de la surveillance');
        console.log('üí° [PaymentMonitor] Le paiement pourrait √™tre en cours. V√©rifiez manuellement ou utilisez le d√©bogueur.');
        this.config.onError(new Error(`Surveillance interrompue apr√®s ${this.maxAttempts} tentatives. Le paiement pourrait √™tre en cours.`));
        this.stop();
        return;
      }

    } catch (error) {
      console.error('‚ùå [PaymentMonitor] Erreur lors de la v√©rification:', error);
      this.config.onError(error as Error);
    }
  }

  /**
   * D√©marre le polling intelligent avec exponential backoff
   */
  private startPolling(): void {
    let currentInterval = this.config.pollingInterval;
    let consecutiveErrors = 0;

    const poll = async () => {
      if (!this.isRunning) return;

      // V√©rifier le timeout
      const elapsed = Date.now() - this.startTime;
      if (elapsed > this.config.maxPollingDuration) {
        console.log('‚è∞ [PaymentMonitor] Timeout atteint, arr√™t de la surveillance');
        this.config.onError(new Error('Timeout de surveillance atteint'));
        this.stop();
        return;
      }

      try {
        await this.checkPaymentStatus();
        consecutiveErrors = 0;
        currentInterval = this.config.pollingInterval; // Reset interval on success
      } catch (error) {
        consecutiveErrors++;
        
        // Exponential backoff en cas d'erreurs r√©p√©t√©es
        if (consecutiveErrors > 1) {
          currentInterval = Math.min(currentInterval * 1.5, 30000); // Max 30s
          console.log(`üìà [PaymentMonitor] Augmentation de l'intervalle √† ${currentInterval}ms apr√®s ${consecutiveErrors} erreurs`);
        }
      }

      // Programmer la prochaine v√©rification
      if (this.isRunning) {
        this.pollingInterval = setTimeout(poll, currentInterval);
      }
    };

    // D√©marrer le polling
    this.pollingInterval = setTimeout(poll, this.config.pollingInterval);
  }

  /**
   * D√©marre les notifications temps r√©el
   */
  private startRealtime(): void {
    try {
      this.realtimeUnsubscribe = paymentRealtimeService.subscribeToInvoice(
        this.invoiceId,
        (update) => {
          console.log('‚ö° [PaymentMonitor] Notification temps r√©el re√ßue:', update);
          
          // V√©rifier que c'est bien notre transaction
          if (update.transactionId === this.transactionId || !update.transactionId) {
            this.config.onStatusChange(update);
            
            // Arr√™ter la surveillance si le paiement est finalis√©
            if (update.status === 'paid' || update.status === 'failed') {
              console.log('‚ö° [PaymentMonitor] Paiement finalis√© via notification temps r√©el');
              this.stop();
            }
          }
        }
      );
    } catch (error) {
      console.error('‚ùå [PaymentMonitor] Erreur lors du d√©marrage des notifications temps r√©el:', error);
      this.config.onError(error as Error);
    }
  }

  /**
   * Indique si la surveillance est en cours
   */
  public get running(): boolean {
    return this.isRunning;
  }

  /**
   * Temps √©coul√© depuis le d√©marrage (en ms)
   */
  public get elapsedTime(): number {
    return this.isRunning ? Date.now() - this.startTime : 0;
  }
}
