#!/bin/bash
# deploy-ai-payment-optimization.sh
# Script de d√©ploiement de la version optimis√©e de AI Payment Prediction

set -e

echo "üöÄ D√âPLOIEMENT AI PAYMENT PREDICTION OPTIMIS√âE"
echo "================================================"

# Configuration
FUNCTION_NAME="ai-payment-prediction"
BACKUP_SUFFIX=$(date +%Y%m%d_%H%M%S)

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v supabase &> /dev/null; then
        log_error "Supabase CLI non install√©. Installez-le avec: npm install -g supabase"
        exit 1
    fi
    
    if ! supabase --version &> /dev/null; then
        log_error "Erreur avec Supabase CLI"
        exit 1
    fi
    
    log_success "Supabase CLI disponible"
    
    # V√©rifier la connexion Supabase
    if ! supabase status &> /dev/null; then
        log_warning "Projet Supabase non initialis√©, tentative de connexion..."
        supabase login
    fi
    
    log_success "Pr√©requis valid√©s"
}

# Sauvegarde de l'ancienne version
backup_current_function() {
    log_info "Sauvegarde de la version actuelle..."
    
    local backup_dir="backups/ai-payment-prediction"
    mkdir -p "$backup_dir"
    
    if [ -f "supabase/functions/$FUNCTION_NAME/index.ts" ]; then
        cp "supabase/functions/$FUNCTION_NAME/index.ts" "$backup_dir/index_backup_$BACKUP_SUFFIX.ts"
        log_success "Sauvegarde cr√©√©e: $backup_dir/index_backup_$BACKUP_SUFFIX.ts"
    else
        log_warning "Aucune version existante trouv√©e"
    fi
}

# D√©ploiement de la version optimis√©e
deploy_optimized_version() {
    log_info "D√©ploiement de la version optimis√©e..."
    
    # Copier la version optimis√©e
    if [ -f "supabase/functions/$FUNCTION_NAME/index-optimized.ts" ]; then
        cp "supabase/functions/$FUNCTION_NAME/index-optimized.ts" "supabase/functions/$FUNCTION_NAME/index.ts"
        log_success "Version optimis√©e copi√©e"
    else
        log_error "Fichier optimis√© non trouv√©: supabase/functions/$FUNCTION_NAME/index-optimized.ts"
        exit 1
    fi
    
    # D√©ployer la fonction
    log_info "D√©ploiement en cours..."
    
    if supabase functions deploy $FUNCTION_NAME; then
        log_success "Fonction $FUNCTION_NAME d√©ploy√©e avec succ√®s"
    else
        log_error "Erreur lors du d√©ploiement"
        
        # Restaurer la sauvegarde en cas d'erreur
        log_info "Restauration de la version pr√©c√©dente..."
        if [ -f "backups/ai-payment-prediction/index_backup_$BACKUP_SUFFIX.ts" ]; then
            cp "backups/ai-payment-prediction/index_backup_$BACKUP_SUFFIX.ts" "supabase/functions/$FUNCTION_NAME/index.ts"
            supabase functions deploy $FUNCTION_NAME
            log_warning "Version pr√©c√©dente restaur√©e"
        fi
        
        exit 1
    fi
}

# Test de la fonction d√©ploy√©e
test_deployed_function() {
    log_info "Test de la fonction d√©ploy√©e..."
    
    # Lancer le script de test
    if [ -f "test-ia-functions.js" ]; then
        log_info "Ex√©cution des tests automatis√©s..."
        if node test-ia-functions.js | grep -q "Test: Pr√©diction de Paiement"; then
            log_success "Tests automatis√©s pass√©s"
        else
            log_warning "Tests automatis√©s √©chou√©s ou incomplets"
        fi
    fi
    
    # Test manuel simple
    log_info "Test de connectivit√© de base..."
    local test_url=$(supabase status | grep "API URL" | awk '{print $3}')
    
    if [ -n "$test_url" ]; then
        log_success "URL API disponible: $test_url"
    else
        log_warning "Impossible de r√©cup√©rer l'URL API"
    fi
}

# Optimisation post-d√©ploiement
post_deployment_optimization() {
    log_info "Optimisations post-d√©ploiement..."
    
    # Lancer le script d'optimisation
    if [ -f "optimize-ai-payment-prediction.js" ]; then
        log_info "Analyse de performance post-d√©ploiement..."
        node optimize-ai-payment-prediction.js > "logs/optimization_report_$BACKUP_SUFFIX.json" 2>&1 || {
            log_warning "Script d'optimisation termin√© avec avertissements"
        }
        log_success "Rapport d'optimisation g√©n√©r√©"
    fi
    
    # Configuration des variables d'environnement optimis√©es
    log_info "Configuration des variables d'optimisation..."
    
    # Note: Les secrets Supabase doivent √™tre configur√©s manuellement
    log_info "Variables d'environnement √† configurer dans Supabase Dashboard:"
    echo "  - PREDICTION_CACHE_TTL: 30 (minutes)"
    echo "  - GEMINI_API_KEY: [votre cl√© API Gemini]"
}

# Nettoyage et finalisation
cleanup_and_finalize() {
    log_info "Nettoyage et finalisation..."
    
    # Cr√©er un rapport de d√©ploiement
    local report_file="logs/deployment_report_$BACKUP_SUFFIX.md"
    mkdir -p logs
    
    cat > "$report_file" << EOF
# Rapport de D√©ploiement AI Payment Prediction Optimis√©e

## Informations de D√©ploiement
- **Date**: $(date)
- **Version**: Optimis√©e v1.0
- **Backup ID**: $BACKUP_SUFFIX

## Changements D√©ploy√©s
- ‚úÖ Cache intelligent avec TTL adaptatif
- ‚úÖ Retry logic avec exponential backoff
- ‚úÖ M√©triques de performance int√©gr√©es
- ‚úÖ Nettoyage automatique du cache
- ‚úÖ Fallback optimis√©

## M√©triques Attendues
- **Temps de r√©ponse**: < 2 secondes (95e percentile)
- **Cache hit rate**: > 80% apr√®s rodage
- **Taux d'erreur**: < 1%
- **Disponibilit√©**: > 99.5%

## Actions Post-D√©ploiement
1. Monitorer les m√©triques de performance
2. Configurer les variables d'environnement
3. Valider les tests de charge
4. Mettre √† jour la documentation utilisateur

## Fichiers de Sauvegarde
- Ancienne version: backups/ai-payment-prediction/index_backup_$BACKUP_SUFFIX.ts
- Rapport optimisation: logs/optimization_report_$BACKUP_SUFFIX.json
EOF

    log_success "Rapport de d√©ploiement cr√©√©: $report_file"
    
    # Afficher un r√©sum√©
    echo ""
    echo "üìä R√âSUM√â DU D√âPLOIEMENT"
    echo "========================"
    echo "‚úÖ Fonction AI Payment Prediction optimis√©e d√©ploy√©e"
    echo "üìÅ Sauvegarde: backups/ai-payment-prediction/index_backup_$BACKUP_SUFFIX.ts"
    echo "üìÑ Rapport: $report_file"
    echo "üîß Variables √† configurer: PREDICTION_CACHE_TTL, GEMINI_API_KEY"
    echo ""
    log_success "D√©ploiement termin√© avec succ√®s!"
}

# Fonction principale
main() {
    log_info "D√©but du d√©ploiement de l'optimisation AI Payment Prediction"
    
    # Aller dans le r√©pertoire du projet
    cd "$(dirname "$0")"
    
    # Ex√©cuter les √©tapes
    check_prerequisites
    backup_current_function
    deploy_optimized_version
    test_deployed_function
    post_deployment_optimization
    cleanup_and_finalize
    
    echo ""
    log_success "üéâ D√âPLOIEMENT OPTIMISATION TERMIN√â AVEC SUCC√àS!"
    log_info "Surveillez les m√©triques de performance dans les prochaines heures"
}

# Gestion des signaux d'interruption
trap 'log_error "D√©ploiement interrompu"; exit 1' INT TERM

# Ex√©cution avec gestion d'erreur globale
if main "$@"; then
    exit 0
else
    log_error "√âchec du d√©ploiement"
    exit 1
fi
