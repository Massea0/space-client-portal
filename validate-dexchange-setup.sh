#!/bin/bash

# Script de validation finale - V√©rifie que tout est pr√™t pour le d√©ploiement
# Ce script v√©rifie les fichiers, la configuration et les pr√©requis

echo "üîç Validation finale du syst√®me DExchange..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ERRORS=0
WARNINGS=0

# Fonction d'affichage
print_status() {
  if [ "$1" == "OK" ]; then
    echo -e "  ${GREEN}‚úÖ $2${NC}"
  elif [ "$1" == "WARN" ]; then
    echo -e "  ${YELLOW}‚ö†Ô∏è  $2${NC}"
    ((WARNINGS++))
  elif [ "$1" == "ERROR" ]; then
    echo -e "  ${RED}‚ùå $2${NC}"
    ((ERRORS++))
  else
    echo -e "  ${BLUE}‚ÑπÔ∏è  $2${NC}"
  fi
}

echo ""
echo "üìÅ V√©rification des fichiers..."

# V√©rifier les fichiers de fonction
if [ -f "supabase/functions/dexchange-callback-handler/index.ts" ]; then
  print_status "OK" "Fonction dexchange-callback-handler pr√©sente"
else
  print_status "ERROR" "Fonction dexchange-callback-handler manquante"
fi

if [ -f "supabase/functions/get-public-config/index.ts" ]; then
  print_status "OK" "Fonction get-public-config pr√©sente"
else
  print_status "ERROR" "Fonction get-public-config manquante"
fi

# V√©rifier les scripts
SCRIPTS=("deploy-complete-dexchange.sh" "test-dexchange-deployment.sh" "create-env-template.sh")
for script in "${SCRIPTS[@]}"; do
  if [ -f "$script" ] && [ -x "$script" ]; then
    print_status "OK" "Script $script pr√©sent et ex√©cutable"
  elif [ -f "$script" ]; then
    print_status "WARN" "Script $script pr√©sent mais pas ex√©cutable"
  else
    print_status "ERROR" "Script $script manquant"
  fi
done

# V√©rifier la documentation
DOCS=("IMPLEMENTATION-COMPLETE-DEXCHANGE.md" "CONFIGURATION-VARIABLES-DEXCHANGE.md")
for doc in "${DOCS[@]}"; do
  if [ -f "$doc" ]; then
    print_status "OK" "Documentation $doc pr√©sente"
  else
    print_status "WARN" "Documentation $doc manquante"
  fi
done

echo ""
echo "üîß V√©rification de la configuration..."

# Charger .env si disponible
if [ -f ".env" ]; then
  print_status "OK" "Fichier .env pr√©sent"
  source .env
else
  print_status "WARN" "Fichier .env manquant - utilisez ./create-env-template.sh"
fi

# V√©rifier les variables critiques
CRITICAL_VARS=("SUPABASE_URL" "SUPABASE_ANON_KEY" "SUPABASE_SERVICE_ROLE_KEY")
for var in "${CRITICAL_VARS[@]}"; do
  if [ ! -z "${!var}" ]; then
    print_status "OK" "$var configur√©e"
  else
    print_status "ERROR" "$var manquante (critique)"
  fi
done

# V√©rifier les variables DExchange importantes
IMPORTANT_VARS=("DEXCHANGE_API_KEY" "DEXCHANGE_WEBHOOK_SECRET" "SITE_URL")
for var in "${IMPORTANT_VARS[@]}"; do
  if [ ! -z "${!var}" ]; then
    print_status "OK" "$var configur√©e"
  else
    print_status "WARN" "$var manquante (importante)"
  fi
done

# V√©rifier les variables optionnelles
OPTIONAL_VARS=("GCP_RELAY_URL" "DEXCHANGE_ENVIRONMENT")
for var in "${OPTIONAL_VARS[@]}"; do
  if [ ! -z "${!var}" ]; then
    print_status "OK" "$var configur√©e"
  else
    print_status "INFO" "$var non configur√©e (optionnelle)"
  fi
done

echo ""
echo "üõ†Ô∏è  V√©rification des outils..."

# V√©rifier que supabase CLI est disponible
if command -v supabase &> /dev/null; then
  SUPABASE_VERSION=$(supabase --version 2>/dev/null | head -1)
  print_status "OK" "Supabase CLI disponible ($SUPABASE_VERSION)"
else
  print_status "ERROR" "Supabase CLI non trouv√©"
fi

# V√©rifier que curl est disponible
if command -v curl &> /dev/null; then
  print_status "OK" "curl disponible"
else
  print_status "ERROR" "curl non trouv√© (requis pour les tests)"
fi

# V√©rifier que jq est disponible
if command -v jq &> /dev/null; then
  print_status "OK" "jq disponible (pour parsing JSON)"
else
  print_status "WARN" "jq non trouv√© (recommand√© pour les tests)"
fi

echo ""
echo "üîó Test de connectivit√© Supabase..."

if [ ! -z "$SUPABASE_URL" ]; then
  # Tester la connectivit√© √† Supabase
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SUPABASE_URL" 2>/dev/null || echo "000")
  
  if [ "$HTTP_STATUS" != "000" ]; then
    print_status "OK" "Supabase accessible (HTTP $HTTP_STATUS)"
  else
    print_status "ERROR" "Supabase non accessible"
  fi
else
  print_status "ERROR" "SUPABASE_URL non configur√©e - impossible de tester la connectivit√©"
fi

echo ""
echo "üìä R√©sum√© de la validation..."

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
  echo -e "${GREEN}üéâ Validation r√©ussie ! Tout est pr√™t pour le d√©ploiement.${NC}"
  echo ""
  echo "üöÄ Prochaines √©tapes :"
  echo "  1. ./deploy-complete-dexchange.sh"
  echo "  2. ./test-dexchange-deployment.sh"
elif [ $ERRORS -eq 0 ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Validation avec avertissements ($WARNINGS warnings).${NC}"
  echo "Le d√©ploiement est possible mais certaines fonctionnalit√©s peuvent √™tre limit√©es."
  echo ""
  echo "üîß Actions recommand√©es :"
  echo "  - Configurez les variables manquantes dans .env"
  echo "  - Consultez CONFIGURATION-VARIABLES-DEXCHANGE.md"
else
  echo -e "${RED}‚ùå Validation √©chou√©e ($ERRORS erreurs, $WARNINGS warnings).${NC}"
  echo ""
  echo "üõ†Ô∏è  Actions requises :"
  echo "  - Corrigez les erreurs critiques list√©es ci-dessus"
  echo "  - Configurez les variables manquantes"
  echo "  - Relancez ce script de validation"
  exit 1
fi

echo ""
echo "üìö Documentation disponible :"
echo "  - IMPLEMENTATION-COMPLETE-DEXCHANGE.md (vue d'ensemble)"
echo "  - CONFIGURATION-VARIABLES-DEXCHANGE.md (configuration d√©taill√©e)"
