/**
 * Script de test complet pour la cha√Æne de paiement Dexchange
 * Ce script simule un flux complet de paiement:
 * 1. Cr√©ation d'une transaction
 * 2. Simulation d'un webhook de callback (comme si Dexchange nous notifiait)
 * 3. V√©rification que la facture est bien marqu√©e comme pay√©e
 */

import fetch from 'node-fetch';
import { v4 as uuidv4 } from 'uuid';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config({ path: '.env' });

// Configuration
const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const DEXCHANGE_WEBHOOK_SECRET = process.env.DEXCHANGE_WEBHOOK_SECRET;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY || !SUPABASE_SERVICE_ROLE_KEY || !DEXCHANGE_WEBHOOK_SECRET) {
  console.error("‚ùå Variables d'environnement manquantes. V√©rifiez votre fichier .env");
  process.exit(1);
}

// Cr√©er les clients Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// Fonction principale
async function runEndToEndTest() {
  try {
    console.log("üß™ D√©marrage du test end-to-end pour le processus de paiement Dexchange");
    
    // 1. Cr√©er ou r√©cup√©rer une facture de test
    console.log("üìù Cr√©ation d'une facture de test...");
    const testInvoiceId = await createTestInvoice();
    console.log(`‚úÖ Facture cr√©√©e avec ID: ${testInvoiceId}`);
    
    // 2. Initier un paiement pour cette facture
    console.log("üí∞ Initiation du paiement...");
    const paymentData = await initiatePayment(testInvoiceId);
    console.log(`‚úÖ Paiement initi√©! Transaction ID: ${paymentData.transactionId}`);
    
    // 3. V√©rifier l'√©tat initial du paiement
    console.log("üîé V√©rification de l'√©tat initial du paiement...");
    const initialStatus = await checkPaymentStatus(paymentData.transactionId, testInvoiceId);
    console.log(`‚ÑπÔ∏è √âtat initial: ${initialStatus.status}`);
    
    // 4. Simuler un webhook de callback de Dexchange
    console.log("üîÑ Simulation d'un callback de paiement Dexchange...");
    await simulateWebhookCallback(testInvoiceId, paymentData.transactionId);
    console.log("‚úÖ Callback simul√© avec succ√®s!");
    
    // 5. Attendre quelques secondes pour que les mises √† jour se propagent
    console.log("‚è±Ô∏è Attente de la propagation des mises √† jour...");
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 6. V√©rifier l'√©tat final du paiement
    console.log("üîé V√©rification de l'√©tat final du paiement...");
    const finalStatus = await checkPaymentStatus(paymentData.transactionId, testInvoiceId);
    
    // 7. R√©sum√© du test
    console.log("\nüìä R√âSULTAT DU TEST:");
    console.log(`InvoiceID: ${testInvoiceId}`);
    console.log(`TransactionID: ${paymentData.transactionId}`);
    console.log(`√âtat initial: ${initialStatus.status}`);
    console.log(`√âtat final: ${finalStatus.status}`);
    
    if (finalStatus.status === 'paid' || finalStatus.invoiceStatus === 'paid') {
      console.log("‚úÖ TEST R√âUSSI: Le paiement a bien √©t√© marqu√© comme pay√©!");
    } else {
      console.log(`‚ùå TEST √âCHOU√â: Le paiement n'a pas √©t√© marqu√© comme pay√©. √âtat final: ${finalStatus.status}`);
    }
    
    // 8. Nettoyage si n√©cessaire (pour tests futurs)
    if (process.env.CLEANUP_TEST_DATA === 'true') {
      console.log("üßπ Nettoyage des donn√©es de test...");
      await cleanupTestData(testInvoiceId);
    }
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du test: ${error.message}`);
    console.error(error);
  }
}

// Fonction pour cr√©er une facture de test
async function createTestInvoice() {
  const testClientId = process.env.TEST_CLIENT_ID || '00000000-0000-0000-0000-000000000000';
  const { data, error } = await supabaseAdmin
    .from('invoices')
    .insert({
      client_id: testClientId,
      amount: 1000, // 1000 FCFA
      status: 'pending',
      due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // due dans 7 jours
      invoice_number: `TEST-${Math.floor(Math.random() * 10000)}`,
      invoice_date: new Date().toISOString()
    })
    .select()
    .single();
  
  if (error) throw new Error(`Erreur lors de la cr√©ation de la facture: ${error.message}`);
  return data.id;
}

// Fonction pour initier un paiement
async function initiatePayment(invoiceId) {
  const response = await fetch(`${SUPABASE_URL}/functions/v1/initiate-payment`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
    },
    body: JSON.stringify({
      invoiceId: invoiceId,
      paymentMethod: 'orange_money',
      phoneNumber: '771234567'
    })
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur lors de l'initiation du paiement: ${errorText}`);
  }
  
  return await response.json();
}

// Fonction pour v√©rifier le statut du paiement
async function checkPaymentStatus(transactionId, invoiceId) {
  const response = await fetch(
    `${SUPABASE_URL}/functions/v1/payment-status?transactionId=${transactionId}&invoiceId=${invoiceId}`, 
    {
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    }
  );
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur lors de la v√©rification du statut: ${errorText}`);
  }
  
  return await response.json();
}

// Fonction pour simuler un webhook de callback
async function simulateWebhookCallback(invoiceId, transactionId) {
  // Cr√©er un √©v√©nement simul√© comme le ferait Dexchange
  const webhookPayload = {
    type: 'payment.completed',
    data: {
      object: {
        id: transactionId,
        invoice_id: invoiceId,
        status: 'succeeded',
        provider: 'orange_money',
        amount: 1000,
        currency: 'XOF',
        created_at: new Date().toISOString(),
        metadata: {
          invoice_id: invoiceId
        }
      }
    }
  };
  
  // Simuler une signature (dans un cas r√©el, ceci serait cryptographiquement g√©n√©r√©)
  const mockSignature = 'mock_signature_for_testing';
  
  // Envoyer la requ√™te √† notre endpoint de callback
  const response = await fetch(`${SUPABASE_URL}/functions/v1/dexchange-callback-handler`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Dexchange-Signature': mockSignature
    },
    body: JSON.stringify(webhookPayload)
  });
  
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur lors de la simulation du webhook: ${errorText} (${response.status})`);
  }
  
  return await response.json();
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData(invoiceId) {
  // Supprimer d'abord les transactions de paiement li√©es
  const { error: txError } = await supabaseAdmin
    .from('payment_transactions')
    .delete()
    .eq('invoice_id', invoiceId);
  
  if (txError) console.warn(`Avertissement lors du nettoyage des transactions: ${txError.message}`);
  
  // Supprimer ensuite la facture
  const { error: invError } = await supabaseAdmin
    .from('invoices')
    .delete()
    .eq('id', invoiceId);
  
  if (invError) console.warn(`Avertissement lors du nettoyage de la facture: ${invError.message}`);
}

// Ex√©cuter le test
runEndToEndTest();
