// test-payment-status-direct.js
// Test direct de la fonction payment-status pour v√©rifier qu'elle renvoie bien le statut "paid" pour une facture pay√©e
// Usage: node test-payment-status-direct.js <invoice_id>

import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

// Param√®tres de connexion
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

// ID de facture √† tester depuis les arguments de ligne de commande ou utiliser une valeur par d√©faut
const invoiceId = process.argv[2] || '197dc760-08a2-4e18-884d-098c1bcd08d0'; // La premi√®re facture de votre exemple

// Fonction principale auto-ex√©cut√©e
(async function main() {
  try {
    console.log(`üìä V√©rification directe du statut pour la facture ${invoiceId}`);
    
    // 1. Appel direct de la fonction via la cl√© anonyme
    console.log('üîÑ Appel direct avec cl√© anonyme...');
    const anonResponse = await fetch(`${SUPABASE_URL}/functions/v1/payment-status?invoiceId=${invoiceId}`, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    const anonResult = await anonResponse.json();
    console.log('‚úÖ R√©sultat via cl√© anonyme:', JSON.stringify(anonResult, null, 2));
    
    // 2. Appel direct de la fonction via la cl√© de service
    console.log('üîÑ Appel direct avec cl√© de service...');
    const serviceResponse = await fetch(`${SUPABASE_URL}/functions/v1/payment-status?invoiceId=${invoiceId}`, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
      }
    });
    
    const serviceResult = await serviceResponse.json();
    console.log('‚úÖ R√©sultat via cl√© de service:', JSON.stringify(serviceResult, null, 2));
    
    // 3. V√©rifier les statuts
    console.log('\nüìä R√©sum√© des statuts:');
    console.log(`  - Via cl√© anonyme: ${anonResult.status || 'erreur'}`);
    console.log(`  - Via cl√© de service: ${serviceResult.status || 'erreur'}`);
    
    if (anonResult.status === 'paid' && serviceResult.status === 'paid') {
      console.log('üéâ SUCC√àS: Tous les statuts sont coh√©rents (paid)');
    } else {
      console.log('‚ö†Ô∏è ATTENTION: Les statuts ne sont pas coh√©rents');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur non g√©r√©e:', error);
  }
})();
