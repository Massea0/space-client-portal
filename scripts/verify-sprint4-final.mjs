#!/usr/bin/env node
// Script de v√©rification finale Sprint 4
// V√©rifie que tous les composants sont fonctionnels

import { execSync } from 'child_process';
import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

const PROJECT_ROOT = process.cwd();

console.log('üîç V√©rification finale Sprint 4 - Composants Avanc√©s');
console.log('=' .repeat(60));

// 1. V√©rifier l'existence des fichiers principaux
const requiredFiles = [
  'src/components/ui/draggable-list.tsx',
  'src/components/ui/draggable-item.tsx',
  'src/components/ui/workflow-builder/workflow-builder.tsx',
  'src/components/ui/workflow-builder/workflow-node.tsx',
  'src/components/ui/workflow-builder/workflow-controls.tsx',
  'docs/components/DRAGGABLE-LIST.md',
  'docs/components/WORKFLOW-BUILDER.md',
  'docs/planning/SPRINT-4-RAPPORT-FINAL.md'
];

console.log('\nüìÅ V√©rification des fichiers...');
let filesOk = true;
for (const file of requiredFiles) {
  const fullPath = join(PROJECT_ROOT, file);
  if (existsSync(fullPath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
    filesOk = false;
  }
}

// 2. V√©rifier les d√©pendances
console.log('\nüì¶ V√©rification des d√©pendances...');
let depsOk = true;
try {
  const packageJson = JSON.parse(readFileSync(join(PROJECT_ROOT, 'package.json'), 'utf8'));
  const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = [
    '@dnd-kit/core',
    '@dnd-kit/sortable', 
    '@dnd-kit/utilities',
    'reactflow'
  ];
  
  for (const dep of requiredDeps) {
    if (deps[dep]) {
      console.log(`‚úÖ ${dep} v${deps[dep]}`);
    } else {
      console.log(`‚ùå ${dep} - NON INSTALL√â`);
      depsOk = false;
    }
  }
} catch (error) {
  console.log('‚ùå Erreur lecture package.json');
  depsOk = false;
}

// 3. V√©rifier la compilation TypeScript
console.log('\nüîß V√©rification TypeScript...');
try {
  execSync('npx tsc --noEmit --skipLibCheck', { 
    stdio: 'pipe',
    cwd: PROJECT_ROOT 
  });
  console.log('‚úÖ Compilation TypeScript OK');
} catch (error) {
  console.log('‚ùå Erreurs TypeScript d√©tect√©es');
  console.log(error.stdout?.toString() || error.message);
}

// 4. V√©rifier les imports dans le showcase
console.log('\nüé® V√©rification du showcase...');
try {
  const showcasePath = join(PROJECT_ROOT, 'src/pages/design-system-showcase.tsx');
  if (existsSync(showcasePath)) {
    const showcaseContent = readFileSync(showcasePath, 'utf8');
    
    const requiredImports = [
      'DraggableList',
      'WorkflowBuilder'
    ];
    
    let showcaseOk = true;
    for (const imp of requiredImports) {
      if (showcaseContent.includes(imp)) {
        console.log(`‚úÖ Import ${imp} trouv√©`);
      } else {
        console.log(`‚ùå Import ${imp} manquant`);
        showcaseOk = false;
      }
    }
    
    if (showcaseContent.includes('Sprint 4 - Composants Avanc√©s')) {
      console.log('‚úÖ Section Sprint 4 pr√©sente');
    } else {
      console.log('‚ùå Section Sprint 4 manquante');
      showcaseOk = false;
    }
  }
} catch (error) {
  console.log('‚ùå Erreur v√©rification showcase');
}

// 5. R√©sum√© final
console.log('\n' + '=' .repeat(60));
if (filesOk && depsOk) {
  console.log('üéâ SPRINT 4 - V√âRIFICATION R√âUSSIE !');
  console.log('');
  console.log('‚úÖ Tous les fichiers pr√©sents');
  console.log('‚úÖ Toutes les d√©pendances install√©es');
  console.log('‚úÖ Compilation TypeScript OK');
  console.log('‚úÖ Int√©gration showcase OK');
  console.log('');
  console.log('üöÄ Les composants sont pr√™ts pour utilisation !');
  console.log('');
  console.log('Pour tester :');
  console.log('1. npm run dev');
  console.log('2. Ouvrir http://localhost:8080');
  console.log('3. Chercher la section "Sprint 4 - Composants Avanc√©s"');
} else {
  console.log('‚ö†Ô∏è  PROBL√àMES D√âTECT√âS');
  console.log('V√©rifiez les erreurs ci-dessus avant utilisation.');
}

console.log('\nüìö Documentation disponible :');
console.log('- docs/components/DRAGGABLE-LIST.md');
console.log('- docs/components/WORKFLOW-BUILDER.md');
console.log('- docs/planning/SPRINT-4-RAPPORT-FINAL.md');

console.log('\n' + '=' .repeat(60));
