#!/bin/bash

# Script d'analyse des composants React n√©cessitant une optimisation
# Ce script identifie les composants volumineux, les re-rendus potentiellement inutiles et autres opportunit√©s d'optimisation

echo "üîç Analyse des composants React pour opportunit√©s d'optimisation..."

# D√©finir les seuils
SIZE_THRESHOLD=200  # Nombre de lignes √† partir duquel un composant est consid√©r√© comme volumineux
COMPLEXITY_KEYWORDS=("useState" "useEffect" "useContext" "map(" "filter(" "reduce(" "sort(")

# 1. Trouver les composants volumineux
echo -e "\nüìè COMPOSANTS VOLUMINEUX (> $SIZE_THRESHOLD lignes):"
find src/components -type f -name "*.tsx" -not -path "*/node_modules/*" | xargs wc -l | sort -nr | grep -v "total" | head -10

# 2. Trouver les composants avec des √©tats potentiellement inutiles
echo -e "\nüîÑ COMPOSANTS AVEC √âTATS MULTIPLES (potentiellement √† optimiser):"
grep -r "useState(" --include="*.tsx" src/components | cut -d: -f1 | sort | uniq -c | sort -nr | head -10

# 3. Trouver les effets sans d√©pendances bien d√©finies
echo -e "\n‚ö†Ô∏è  EFFETS AVEC D√âPENDANCES POTENTIELLEMENT PROBL√âMATIQUES:"
grep -r "useEffect" --include="*.tsx" --after-context=2 src/components | grep -e "\[\]" -e ", \[\]" | cut -d: -f1 | sort | uniq -c | sort -nr

# 4. Chercher les composants qui pourraient b√©n√©ficier de m√©mo√Øsation
echo -e "\nüíæ COMPOSANTS CANDIDATS POUR M√âMO√èSATION (fonctions complexes sans React.memo):"
grep -r -L "React.memo" --include="*.tsx" src/components | xargs grep -l "return (" | sort

# 5. V√©rifier l'utilisation de React.memo, useCallback et useMemo
echo -e "\nüìä UTILISATION ACTUELLE DES TECHNIQUES D'OPTIMISATION:"
echo "- React.memo: $(grep -r "React.memo" --include="*.tsx" src/components | wc -l) occurrences"
echo "- useCallback: $(grep -r "useCallback" --include="*.tsx" src/components | wc -l) occurrences"
echo "- useMemo: $(grep -r "useMemo" --include="*.tsx" src/components | wc -l) occurrences"

# 6. Analyser la complexit√© des composants (heuristique bas√©e sur des mots-cl√©s)
echo -e "\nüßÆ ANALYSE DE COMPLEXIT√â (bas√©e sur useState, map, filter, etc.):"
for keyword in "${COMPLEXITY_KEYWORDS[@]}"
do
  count=$(grep -r "$keyword" --include="*.tsx" src/components | wc -l)
  echo "- $keyword: $count occurrences"
done

echo -e "\n‚úÖ Analyse termin√©e. Utilisez ces informations pour prioriser les efforts d'optimisation."
echo "   Consultez docs/guidelines/GUIDE-OPTIMISATION-PERFORMANCES-REACT.md pour les techniques d'optimisation."
