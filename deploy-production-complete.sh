#!/bin/bash

# Script de build et d√©ploiement production complet
# Construit l'application avec la configuration production et la d√©ploie

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ BUILD ET D√âPLOIEMENT PRODUCTION MYSPACE${NC}"
echo "=================================================="

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Erreur: package.json non trouv√©${NC}"
    echo -e "${YELLOW}üí° Ex√©cutez ce script depuis la racine du projet${NC}"
    exit 1
fi

# √âtape 1: V√©rification des variables d'environnement
echo -e "${YELLOW}üìã 1. V√©rification de la configuration...${NC}"

if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå Erreur: .env.production non trouv√©${NC}"
    echo -e "${YELLOW}üí° Cr√©ez le fichier .env.production avec les bonnes variables${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Configuration production trouv√©e${NC}"

# Afficher les variables principales
echo -e "${BLUE}üìä Configuration √† utiliser:${NC}"
source .env.production
echo "  VITE_SUPABASE_URL: ${VITE_SUPABASE_URL}"
echo "  VITE_SITE_URL: ${VITE_SITE_URL}"
echo "  VITE_DEXCHANGE_ENVIRONMENT: ${VITE_DEXCHANGE_ENVIRONMENT}"
echo ""

# √âtape 2: Installation des d√©pendances
echo -e "${YELLOW}üì¶ 2. Installation des d√©pendances...${NC}"

# Essayer d'abord l'installation normale
npm install --legacy-peer-deps
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Installation normale √©chou√©e, tentative avec --force...${NC}"
    npm install --force
    if [ $? -ne 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Installation compl√®te √©chou√©e, on continue sans r√©installer...${NC}"
        echo -e "${BLUE}üí° Utilisation des d√©pendances existantes${NC}"
    fi
fi
echo -e "${GREEN}‚úÖ D√©pendances pr√™tes${NC}"

# √âtape 3: Build de production
echo -e "${YELLOW}üî® 3. Build de l'application...${NC}"

# Supprimer l'ancien build
rm -rf dist

# Build avec les variables de production
npm run build
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors du build${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"

# V√©rifier que le build a cr√©√© les fichiers
if [ ! -d "dist" ]; then
    echo -e "${RED}‚ùå Erreur: Le dossier dist n'a pas √©t√© cr√©√©${NC}"
    exit 1
fi

echo -e "${BLUE}üìÅ Contenu du build:${NC}"
ls -la dist/

# √âtape 4: Cr√©er les fichiers de configuration pour SPA
echo -e "${YELLOW}üîß 4. Configuration SPA...${NC}"

# Cr√©er le fichier _redirects pour Netlify-style redirects
cat > dist/_redirects << 'EOF'
# Redirections pour Single Page Application
/*    /index.html   200

# Pages de paiement sp√©cifiques
/payment/success  /index.html  200
/payment/failure  /index.html  200
/payment/cancel   /index.html  200
EOF

# Cr√©er le fichier .htaccess pour Apache
cat > dist/.htaccess << 'EOF'
# Configuration Apache pour SPA React
RewriteEngine On

# Gestion des routes React Router
RewriteBase /
RewriteRule ^index\.html$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.html [L]

# Headers de s√©curit√©
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"

# Cache des assets
<filesMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg)$">
    ExpiresActive On
    ExpiresDefault "access plus 1 month"
</filesMatch>
EOF

echo -e "${GREEN}‚úÖ Configuration SPA cr√©√©e${NC}"

# √âtape 5: Test de la fonction de configuration publique
echo -e "${YELLOW}üß™ 5. Test de connectivit√© backend...${NC}"

curl -s "https://qlqgyrfqiflnqknbtycw.supabase.co/functions/v1/get-public-config" > /tmp/config_test.json
if [ $? -eq 0 ]; then
    if grep -q '"success":true' /tmp/config_test.json; then
        echo -e "${GREEN}‚úÖ Backend op√©rationnel${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Backend accessible mais configuration incompl√®te${NC}"
        cat /tmp/config_test.json
    fi
else
    echo -e "${RED}‚ùå Erreur de connectivit√© backend${NC}"
    echo -e "${YELLOW}üí° V√©rifiez la connexion internet et les URLs${NC}"
fi

# √âtape 6: D√©ploiement automatique
echo -e "${BLUE}üì§ 6. D√©ploiement vers: https://myspace.arcadis.tech${NC}"

# √âtape 7: Ex√©cution du script de d√©ploiement FTPS
echo -e "${YELLOW}üöÄ 7. D√©ploiement FTP...${NC}"

if [ -f "scripts/deployment/deploy_to_hostinger_ftps.sh" ]; then
    chmod +x scripts/deployment/deploy_to_hostinger_ftps.sh
    ./scripts/deployment/deploy_to_hostinger_ftps.sh
    
    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}üéâ D√âPLOIEMENT PRODUCTION R√âUSSI !${NC}"
        echo "=================================================="
        echo -e "${GREEN}üåê Site web: https://myspace.arcadis.tech${NC}"
        echo -e "${GREEN}üí≥ Paiements: Syst√®me Wave/DExchange op√©rationnel${NC}"
        echo ""
        echo -e "${BLUE}üìã URLs importantes:${NC}"
        echo "  ‚Ä¢ Application: https://myspace.arcadis.tech"
        echo "  ‚Ä¢ Succ√®s paiement: https://myspace.arcadis.tech/payment/success"
        echo "  ‚Ä¢ √âchec paiement: https://myspace.arcadis.tech/payment/failure"
        echo ""
        echo -e "${YELLOW}üîß Tests √† effectuer:${NC}"
        echo "  1. V√©rifier que l'application se charge"
        echo "  2. Tester l'authentification"
        echo "  3. Cr√©er une facture de test"
        echo "  4. Initier un paiement Wave/DExchange"
        echo "  5. V√©rifier les webhooks dans Supabase"
        echo ""
    else
        echo -e "${RED}‚ùå Erreur lors du d√©ploiement FTP${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå Script de d√©ploiement FTP non trouv√©${NC}"
    echo -e "${YELLOW}üí° Cherch√©: scripts/deployment/deploy_to_hostinger_ftps.sh${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Processus termin√©${NC}"
