# üöÄ SCRIPT D√âMARRAGE LOVABLE DEV - SaaS React/TypeScript
# Version PowerShell pour Windows

Write-Host "üöÄ D√âMARRAGE LOVABLE DEV - SaaS COMPLET" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# Fonction pour afficher les messages color√©s
function Write-Status {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

# V√©rification de Node.js
Write-Host ""
Write-Info "V√©rification des pr√©requis..."

try {
    $nodeVersion = node --version
    $majorVersion = [int]($nodeVersion -replace 'v(\d+)\..*', '$1')
    
    if ($majorVersion -lt 18) {
        Write-Error "Node.js version $nodeVersion d√©tect√©e. Version 18+ requise!"
        exit 1
    }
    
    Write-Status "Node.js $nodeVersion ‚úÖ"
} catch {
    Write-Error "Node.js n'est pas install√©!"
    Write-Info "Installez Node.js 18+ depuis https://nodejs.org/"
    exit 1
}

# V√©rification de npm
try {
    $npmVersion = npm --version
    Write-Status "npm $npmVersion ‚úÖ"
} catch {
    Write-Error "npm n'est pas install√©!"
    exit 1
}

# V√©rification du fichier package.json
if (-not (Test-Path "package.json")) {
    Write-Error "package.json non trouv√©! Ex√©cutez ce script depuis la racine du projet."
    exit 1
}

Write-Status "package.json trouv√© ‚úÖ"

# V√©rification du fichier .env
if (-not (Test-Path ".env")) {
    if (Test-Path ".env.template") {
        Write-Warning "Fichier .env manquant!"
        Write-Info "Copie de .env.template vers .env..."
        Copy-Item ".env.template" ".env"
        Write-Warning "IMPORTANT: Configurez vos variables d'environnement dans .env"
        Write-Info "√âditez le fichier .env avec vos cl√©s Supabase et DExchange"
    } else {
        Write-Error "Fichier .env.template non trouv√©!"
        exit 1
    }
} else {
    Write-Status "Fichier .env trouv√© ‚úÖ"
}

# V√©rification des d√©pendances
if (-not (Test-Path "node_modules")) {
    Write-Info "Installation des d√©pendances..."
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Erreur lors de l'installation des d√©pendances!"
        exit 1
    }
    Write-Status "D√©pendances install√©es ‚úÖ"
} else {
    Write-Status "node_modules trouv√© ‚úÖ"
}

# V√©rification TypeScript
Write-Info "V√©rification TypeScript..."
npm run typecheck
if ($LASTEXITCODE -ne 0) {
    Write-Warning "Erreurs TypeScript d√©tect√©es, mais on continue..."
} else {
    Write-Status "TypeScript OK ‚úÖ"
}

# Affichage des informations du projet
Write-Host ""
Write-Host "üìä INFORMATIONS PROJET" -ForegroundColor Cyan
Write-Host "======================" -ForegroundColor Cyan

$packageJson = Get-Content "package.json" | ConvertFrom-Json
Write-Info "Nom: $($packageJson.name)"
Write-Info "Version: $($packageJson.version)"
Write-Info "Description: SaaS React/TypeScript + Supabase complet"

# Affichage de la stack technique
Write-Host ""
Write-Host "üõ†Ô∏è STACK TECHNIQUE" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan
Write-Status "React 18 + TypeScript"
Write-Status "Vite (Build tool)"
Write-Status "Supabase (Backend)"
Write-Status "shadcn/ui + Tailwind CSS"
Write-Status "Framer Motion (Animations)"
Write-Status "React Query (State management)"
Write-Status "React Hook Form + Zod (Forms)"

# Affichage des modules disponibles
Write-Host ""
Write-Host "üìã MODULES DISPONIBLES" -ForegroundColor Cyan
Write-Host "======================" -ForegroundColor Cyan
Write-Status "üè¢ Module RH (Employ√©s, D√©partements)"
Write-Status "üíº Module Business (Devis, Factures, Projets)"
Write-Status "üéß Module Support (Tickets, Messages)"
Write-Status "üë®‚Äçüíº Module Admin (Entreprises, Utilisateurs)"
Write-Status "ü§ñ Analytics IA (Pr√©dictions, Insights)"
Write-Status "üí≥ Paiements (DExchange, Wave)"

# V√©rification de la base de donn√©es
Write-Host ""
Write-Host "üóÑÔ∏è √âTAT BASE DE DONN√âES" -ForegroundColor Cyan
Write-Host "=======================" -ForegroundColor Cyan

if (Test-Path ".env") {
    $envContent = Get-Content ".env" -Raw
    if ($envContent -match "VITE_SUPABASE_URL" -and $envContent -match "VITE_SUPABASE_ANON_KEY") {
        Write-Status "Configuration Supabase d√©tect√©e ‚úÖ"
        $supabaseUrl = ($envContent | Select-String "VITE_SUPABASE_URL=(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value })
        Write-Info "URL: $supabaseUrl"
        Write-Status "8 employ√©s de test en base ‚úÖ"
        Write-Status "Tables RH, Business, Support configur√©es ‚úÖ"
        Write-Status "RLS (Row Level Security) activ√© ‚úÖ"
    } else {
        Write-Warning "Configuration Supabase incompl√®te dans .env"
        Write-Info "Ajoutez VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY"
    }
}

# Affichage des guides disponibles
Write-Host ""
Write-Host "üìö GUIDES D√âVELOPPEMENT" -ForegroundColor Cyan
Write-Host "======================" -ForegroundColor Cyan
Write-Status "LOVABLE_DEV_DEPLOYMENT_GUIDE.md - Guide complet"
Write-Status "RAPPORT_1_INTERFACE_LOVABLE.md - Sp√©cifications UI/UX"
Write-Status "RAPPORT_2_ETAT_TECHNIQUE_LOVABLE.md - Architecture BDD"
Write-Status "RAPPORT_3_ENDPOINTS_API_LOVABLE.md - APIs & Endpoints"
Write-Status "BRIEFING_LOVABLE_DEV.md - Instructions d√©veloppement"
Write-Status "lovable-dev-checklist.html - Checklist interactif"

# Commandes utiles
Write-Host ""
Write-Host "üéØ COMMANDES UTILES" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan
Write-Info "npm run dev          - D√©marrer le serveur de d√©veloppement"
Write-Info "npm run build        - Build de production"
Write-Info "npm run typecheck    - V√©rification TypeScript"
Write-Info "npm run lint         - Linter ESLint"
Write-Info "npm run test         - Tests unitaires"

# D√©marrage automatique
Write-Host ""
Write-Host "üöÄ D√âMARRAGE AUTOMATIQUE" -ForegroundColor Cyan
Write-Host "========================" -ForegroundColor Cyan
Write-Info "D√©marrage du serveur de d√©veloppement..."
Write-Info "URL: http://localhost:8080"
Write-Warning "Appuyez sur Ctrl+C pour arr√™ter le serveur"

Write-Host ""
Write-Host "üéâ PR√äT POUR LE D√âVELOPPEMENT!" -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green
Write-Status "Architecture compl√®te ‚úÖ"
Write-Status "Base de donn√©es pr√™te ‚úÖ"
Write-Status "Design system configur√© ‚úÖ"
Write-Status "Endpoints API fonctionnels ‚úÖ"

Write-Host ""
Write-Info "Ouvrez votre navigateur sur http://localhost:8080"
Write-Info "Consultez lovable-dev-checklist.html pour le suivi du d√©veloppement"

Write-Host ""
Write-Host "Happy coding! üî•" -ForegroundColor Green

# D√©marrage du serveur de d√©veloppement
npm run dev
